<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jahaw🥝</title>
  
  
  <link href="https://jahaw.github.io/atom.xml" rel="self"/>
  
  <link href="https://jahaw.github.io/"/>
  <updated>2024-01-05T14:04:24.262Z</updated>
  <id>https://jahaw.github.io/</id>
  
  <author>
    <name>Jahaw🥝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.262Z</published>
    <updated>2024-01-05T14:04:24.262Z</updated>
    
    <content type="html"><![CDATA[<h3 id="监听-浏览器-Tab-切换">监听 浏览器 Tab 切换</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 切换浏览器窗口</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeWindowsTab</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// chrome sougou</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;webkitVisibilityState&quot;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;webkitvisibilitychange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">webkitVisibilityState</span> === <span class="string">&quot;hidden&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 离开了，对数据进行处理，例如关闭流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">true</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 回来了，对数据处理，如开启流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">false</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// IE</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="string">&quot;msvisibilitychange&quot;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;msvisibilitychange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">msVisibilityState</span> === <span class="string">&quot;hidden&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 离开了，对数据进行处理，例如关闭流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">true</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 回来了，对数据处理，如开启流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">false</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// FF</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="string">&quot;mozvisibilitychange&quot;</span> <span class="keyword">in</span> <span class="variable language_">document</span>) &#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;mozvisibilitychange&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">mozVisibilityState</span> === <span class="string">&quot;hidden&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 离开了，对数据进行处理，例如关闭流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">true</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">// 回来了，对数据处理，如开启流</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">postMessage</span>(&#123;<span class="attr">leave</span>: <span class="literal">false</span>&#125;, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="监听浏览器刷新及关闭">监听浏览器刷新及关闭</h3><blockquote><p>onbeforeunload 和 onunload 都是在页面刷新或退出时触发的事件</p></blockquote><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"></span><br><span class="line">事件用法</span><br><span class="line"><span class="variable">onunload</span><span class="variable">window.onunload</span>=<span class="function"><span class="title">function</span>()&#123;<span class="variable">SomeJavaScriptCode</span>&#125;;</span></span><br><span class="line"><span class="function"><span class="variable">onbeforeunload</span><span class="variable">window.onbeforeunload</span>=<span class="title">function</span>()&#123;<span class="variable">SomeJavaScriptCode</span>&#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">区别：</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">unbeforeunload</span>()是在页面刷新或关闭之前触发的事件，而<span class="title">onubload</span>()是在页面刷新或关闭之后才会触发的。</span></span><br><span class="line"><span class="function"><span class="title">unbeforeunload</span>()事件执行的顺序在<span class="title">onunload</span>()事件之前发生。</span></span><br><span class="line"><span class="function"><span class="title">unbeforeunload</span>()事件可以禁止<span class="title">onunload</span>()事件的触发。</span></span><br><span class="line"><span class="function"><span class="title">onunload</span>()事件是无法阻止页面关闭的。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;监听-浏览器-Tab-切换&quot;&gt;监听 浏览器 Tab 切换&lt;/h3&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.262Z</published>
    <updated>2024-01-05T14:04:24.262Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVG">SVG</h2><blockquote><p>可缩放矢量图</p></blockquote><h4 id="SVG-文档基本结构">SVG 文档基本结构</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">&#x27;140&#x27;</span> <span class="attr">heiight</span>=<span class="string">&#x27;170&#x27;</span> <span class="attr">xmlns</span>=<span class="string">&#x27;http://wwww.w3.org/2000/svg&#x27;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Cat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">desc</span>&gt;</span>Stick Figure of Cat<span class="tag">&lt;/<span class="name">desc</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在这里绘制图像 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><svg> 以像素为单位定义了整个图像的 width 和 height，还通过 xmlns 属性定义了 SVG 的命名空间</p><title> 元素的内容可以被阅读器显示在标题栏上或者是作为鼠标指针指向图像时的提示<desc> 元素允许咱们为图像定义完整的描述信息<h4 id="基本形状和属性">基本形状和属性</h4><ul><li>基本图形</li></ul><p><rect>、<circle>、<ellipse>、<line>、<polyline>、<polygon></p><ul><li>基本属性</li></ul><p>fill、stroke、stroke-width、transform</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SVG&quot;&gt;SVG&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;可缩放矢量图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;SVG-文档基本结构&quot;&gt;SVG 文档基本结构&lt;/h4&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.261Z</published>
    <updated>2024-01-05T14:04:24.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Stylelint">Stylelint</h2><h3 id="说明">说明</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;stylelint-config-prettier&quot;</span>: 解决 prettier 与 stylelint 的冲突</span><br><span class="line"><span class="string">&quot;stylelint-config-standard&quot;</span>: 它扩展了 stylelint-config-recommended，并开启了附加规则，以执行 CSS 规范中的现代约定。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Stylelint&quot;&gt;Stylelint&lt;/h2&gt;
&lt;h3 id=&quot;说明&quot;&gt;说明&lt;/h3&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.260Z</published>
    <updated>2024-01-05T14:04:24.261Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Commitlint">Commitlint</h2><blockquote><p>一个 git commit 校验约束工具，就是当我们运行git commmit -m 'xxx’时，来检查’xxx’是不是满足团队约定好的提交规范的工具。</p></blockquote><h4 id="安装依赖">安装依赖</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pnpm install @commitlint/<span class="built_in">config</span>-conventional @commitlint/cli -D -w</span><br><span class="line"></span><br><span class="line">@commitlint/cli</span><br><span class="line">commitlint命令行工具，用于在项目中快速引入 commit message 规范和 commitlint 相关配置规范</span><br><span class="line"></span><br><span class="line">@commitlint/<span class="built_in">config</span>-conventional</span><br><span class="line">commitlint规则集(通常通过commitlint.<span class="built_in">config</span>.js指定)</span><br><span class="line"></span><br><span class="line">commitizen</span><br><span class="line">对应<span class="built_in">package</span>.json <span class="built_in">config</span> commitizen, 格式化commmit message的工具(从commit生成Change <span class="built_in">log</span>)</span><br><span class="line"></span><br><span class="line">cz-conventional-changelog</span><br><span class="line">日志变更标准</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="配置commitlint-hook">配置commitlint hook</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npx</span> husky add .husky/commit-msg <span class="string">&#x27;npx commitlint --edit <span class="variable">$1</span></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">commitlint --edit &lt;文件名&gt;：执行 commitlint 命令行工具，并使用 --edit 选项，从一个文件里提取 commit 内容来进行校验。校验规则由 commitlint.config.js 配置文件来指定，reference-cli</span></span><br><span class="line"><span class="string"><span class="variable">$1</span>：在新版的 husky 中 <span class="variable">$HUSKY_GIT_PARAMS</span> 变量已不再使用，取而代之是 <span class="variable">$1</span> </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Commitlint&quot;&gt;Commitlint&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;一个 git commit 校验约束工具，就是当我们运行git commmit -m &#39;xxx’时，来检查’xxx’是不是满足团队约定好的提交规范的工具。&lt;/p&gt;
&lt;/bloc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-05T14:04:24.259Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-相关问题">Git 相关问题</h2><p><strong>Git 远程仓库文件名大小写</strong></p><ul><li>设置本地git环境识别大小写</li></ul><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config core.ignorecase <span class="literal">false</span></span><br></pre></td></tr></table></figure><ul><li>删除多余的文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">rm</span> --cached src/components/Header -r</span></span><br></pre></td></tr></table></figure><ul><li>同步，提交到远程仓库</li></ul><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="keyword">add</span> . <span class="variable">&amp;&amp;</span> git commit -m <span class="string">&quot;规范组件命名&quot;</span> <span class="variable">&amp;&amp;</span> git push origin dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Git-相关问题&quot;&gt;Git 相关问题&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Git 远程仓库文件名大小写&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置本地git环境识别大小写&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight arduino&quot;&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-05T14:04:24.259Z</updated>
    
    <content type="html"><![CDATA[<ul><li>PeerTube 是一款开源的去中心化视频分享平台</li><li>Fluent-ffmpeg 基于FFmpeg的JavaScript接口，用于处理音频和视频</li></ul><p>流媒体开发库</p><ul><li>Hls.js 实现HTTP Live Streaming客户端。 它依靠HTML5视频和MediaSource扩展进行播放</li><li>MediaStreamRecorder: 用于录制音频和视频的JavaScript库</li><li>WebTorrent 浏览器中实现的BitTorrent客户端，支持实时流媒体，边下边播</li><li>video.js 开源HTML5和Flash视频播放器</li></ul><p>弹幕</p><ul><li>danmaku2ass 将弹幕转换为ASS字幕格式，适用于播放器如mpv，基于Python</li><li>原生JS:<ul><li>横向：<a href="https://github.com/hugeorange/BulletJs.git">https://github.com/hugeorange/BulletJs.git</a></li><li>纵向：<a href="https://segmentfault.com/a/1190000022634959">https://segmentfault.com/a/1190000022634959</a></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* h5 直播间弹幕列表组件</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 使用方式</span></span><br><span class="line"><span class="comment">* &#123;liveInfo.danmuChannel &amp;&amp; &lt;DanmuPanel ref=&#123;ref =&gt; this.danmuRef = ref&#125; wrapH=&#123;DANMUWRAPH&#125;/&gt; &#125;</span></span><br><span class="line"><span class="comment">* 父组件socket拿到数据通过组件 ref 实例调用 addDanmu(data)</span></span><br><span class="line"><span class="comment">* </span></span><br><span class="line"><span class="comment">* 如需样式调整请自行修改less样式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> classnames <span class="keyword">from</span> <span class="string">&quot;classnames&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; debounce, isScrollBottom &#125; <span class="keyword">from</span> <span class="string">&quot;@/util/index&quot;</span>; <span class="comment">// 自行实现或参考我下面的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./index.less&quot;</span>;</span><br><span class="line"></span><br><span class="line">interface propsType &#123;</span><br><span class="line">    wrapH?: string; <span class="comment">// 弹幕容器高度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 弹幕对象类型</span></span><br><span class="line">type contentType = &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">content</span>: string;</span><br><span class="line">    <span class="attr">key</span>: string;</span><br><span class="line">    reactId?: any; <span class="comment">// 列表唯一标识，如不传会自动添加</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">DanmuPanel</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;propsType, any&gt; &#123;</span><br><span class="line">    <span class="attr">danmuWrapHeight</span>: number; <span class="comment">// 弹幕容器dom高度</span></span><br><span class="line">    <span class="attr">danmuWrapRef</span>: <span class="title class_">HTMLElement</span>; <span class="comment">// 弹幕容器dom</span></span><br><span class="line">    <span class="attr">danmuListRef</span>: <span class="title class_">HTMLElement</span>; <span class="comment">// 弹幕列表dom</span></span><br><span class="line">    <span class="attr">restNums</span>: number;</span><br><span class="line">    <span class="attr">reactId</span>: number; <span class="comment">// 弹幕列表 key</span></span><br><span class="line">    <span class="attr">debounceCb</span>: <span class="title class_">Function</span>;</span><br><span class="line">    <span class="attr">isBindScrolled</span>: boolean;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">danmuList</span>: [],</span><br><span class="line">            <span class="attr">restDanmu</span>: <span class="number">0</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">restNums</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">reactId</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">debounceCb</span> = <span class="title function_">debounce</span>(<span class="variable language_">this</span>.<span class="property">danmuScroll</span>, <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initDom</span>();</span><br><span class="line">        <span class="comment">// this.testAddDanmu();</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 测试代码，后期删掉</span></span><br><span class="line">    <span class="title function_">testAddDanmu</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            ++i</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">addDanmu</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: i + <span class="string">&#x27;-我是名字&#x27;</span>,</span><br><span class="line">                <span class="attr">content</span>: i + <span class="string">&#x27;-我是内容&#x27;</span>,</span><br><span class="line">                <span class="attr">key</span>: <span class="string">&quot;danmu&quot;</span>,</span><br><span class="line">                <span class="attr">reactId</span>: i</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private <span class="title function_">initDom</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.danmu-wrap&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmuListRef</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.danmu-wrap .list&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmuWrapHeight</span> = <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="property">offsetHeight</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private addScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">debounceCb</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isBindScrolled</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 弹幕列表滚动到底部回调</span></span><br><span class="line">    private danmuScroll = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> <span class="attr">ele</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>;</span><br><span class="line">        <span class="keyword">const</span> isBottom = <span class="title function_">isScrollBottom</span>(ele, ele.<span class="property">clientHeight</span>);</span><br><span class="line">        <span class="keyword">if</span> (isBottom) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">restNums</span> = <span class="number">0</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">restDanmu</span>: <span class="number">0</span> &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 供父组件调用 socket拿到结果后调用</span></span><br><span class="line">    public addDanmu = <span class="function">(<span class="params">data: contentType</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; danmuList &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        data.<span class="property">reactId</span> = ++<span class="variable language_">this</span>.<span class="property">reactId</span>;</span><br><span class="line">        <span class="keyword">if</span> (danmuList.<span class="property">length</span> &gt;= <span class="number">150</span>) &#123;</span><br><span class="line">            danmuList.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">50</span>)</span><br><span class="line">        &#125;;</span><br><span class="line">        danmuList.<span class="title function_">push</span>(data);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; danmuList &#125;, <span class="variable language_">this</span>.<span class="property">renderDanmu</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private renderDanmu = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> listH = <span class="variable language_">this</span>.<span class="property">danmuListRef</span>.<span class="property">offsetHeight</span>;</span><br><span class="line">        <span class="keyword">const</span> diff = listH - <span class="variable language_">this</span>.<span class="property">danmuWrapHeight</span>;</span><br><span class="line">        <span class="keyword">const</span> top = <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="property">scrollTop</span>;</span><br><span class="line">        <span class="keyword">if</span> (diff - top &lt; <span class="number">50</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (diff &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">isBindScrolled</span>) &#123;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">isBindScrolled</span> = <span class="literal">false</span>;</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">addScroll</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: diff + <span class="number">40</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">restNums</span> = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ++<span class="variable language_">this</span>.<span class="property">restNums</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">isBindScrolled</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isBindScrolled</span> = <span class="literal">true</span>;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="variable language_">this</span>.<span class="property">addScroll</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">restDanmu</span>: <span class="variable language_">this</span>.<span class="property">restNums</span> &gt;= <span class="number">99</span> ? <span class="string">&#x27;99+&#x27;</span> : <span class="variable language_">this</span>.<span class="property">restNums</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private scrollBottom = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">restNums</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">restDanmu</span>: <span class="variable language_">this</span>.<span class="property">restNums</span> &#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">danmuWrapRef</span>.<span class="title function_">scrollTo</span>(&#123; <span class="attr">top</span>: <span class="variable language_">this</span>.<span class="property">danmuListRef</span>.<span class="property">offsetHeight</span>, <span class="attr">left</span>: <span class="number">0</span>, <span class="attr">behavior</span>: <span class="string">&#x27;smooth&#x27;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; danmuList, restDanmu &#125; = <span class="variable language_">this</span>.<span class="property">state</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;danmu-panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;danmu-wrap&quot;</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">height:</span> <span class="attr">this.props.wrapH</span> &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        &#123;</span></span><br><span class="line"><span class="language-xml">                            danmuList.map((v) =&gt; (</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;v.reactId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;v.name&#125;：<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;classnames(</span>&quot;<span class="attr">content</span>&quot;, <span class="attr">v.key</span>)&#125;&gt;</span>&#123;v.content&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            ))</span></span><br><span class="line"><span class="language-xml">                        &#125;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    !!restDanmu &amp;&amp;</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;rest-nums&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;this.scrollBottom&#125;</span>&gt;</span>&#123; restDanmu &#125;条新消息<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// debounce isScrollBottom 实现如下</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 防抖函数</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> fn </span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wait </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn:<span class="built_in">Function</span>, wait:number = <span class="number">500</span></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timeout</span>:number = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 每次触发 scroll handler 时先清除定时器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        <span class="comment">// 指定 xx ms 后触发真正想进行的操作 handler</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(fn, wait);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 是否滚到到容器底部</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> ele 滚动容器</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> wrapHeight 容器高度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">isScrollBottom</span>(<span class="params">ele: HTMLElement, wrapHeight:number, threshold: number = <span class="number">30</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> h1 = ele.<span class="property">scrollHeight</span> - ele.<span class="property">scrollTop</span>;</span><br><span class="line">    <span class="keyword">const</span> h2 = wrapHeight + threshold;</span><br><span class="line">    <span class="keyword">const</span> isBottom = h1 &lt;= h2;</span><br><span class="line">    <span class="comment">// console.log(&#x27;--&gt;&#x27;, isBottom, ele.scrollHeight, ele.scrollTop, h2)</span></span><br><span class="line">    <span class="keyword">return</span> isBottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>h5直播拉流页面调研: <a href="https://segmentfault.com/a/1190000037750253">https://segmentfault.com/a/1190000037750253</a></li></ul></li><li>斗鱼弹幕抓取及可视化管理平台： <a href="https://github.com/Crawler995/DouyuBarrage-Pro.git">https://github.com/Crawler995/DouyuBarrage-Pro.git</a></li><li>a-barrage: <a href="https://github.com/logcas/a-barrage.git">https://github.com/logcas/a-barrage.git</a></li></ul><p>直播间</p><ul><li>LiveRoom<ul><li>地址<ul><li>前端：<a href="https://github.com/jack-hoo/LiveRoomDemo_Client.git">https://github.com/jack-hoo/LiveRoomDemo_Client.git</a><ul><li>核心技术点：hls.js、websocket、</li></ul></li><li>后端：<a href="https://github.com/jack-hoo/LiveRoomDemo_Server.git">https://github.com/jack-hoo/LiveRoomDemo_Server.git</a></li></ul></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;PeerTube 是一款开源的去中心化视频分享平台&lt;/li&gt;
&lt;li&gt;Fluent-ffmpeg 基于FFmpeg的JavaScript接口，用于处理音频和视频&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;流媒体开发库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hls.js 实现HTTP Li</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-05T14:04:24.260Z</updated>
    
    <content type="html"><![CDATA[<h3 id="localtunnel">localtunnel</h3><p><strong>全局安装</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> -g localtunnel</span><br></pre></td></tr></table></figure><p><strong>申请通道URL</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lt <span class="comment">--port 8000</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;localtunnel&quot;&gt;localtunnel&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;全局安装&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cmake&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-11T12:39:14.978Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nic.eu.org">https://nic.eu.org</a></p><p><a href="https://www.fakenamegenerator.com">https://www.fakenamegenerator.com</a></p><p><a href="https://sjc.alpha3cloud.com">https://sjc.alpha3cloud.com</a></p><p>userInfo</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">United</span> <span class="string">Kingdom</span></span><br><span class="line"></span><br><span class="line"><span class="string">Jason</span> <span class="string">M.</span> <span class="string">Rodriguez</span></span><br><span class="line"><span class="number">34</span> <span class="string">Lamphey</span> <span class="string">Road</span></span><br><span class="line"><span class="string">THE</span> <span class="string">BRATCH</span></span><br><span class="line"><span class="string">WV5</span> <span class="string">3SR</span></span><br><span class="line"><span class="number">078</span> <span class="number">0832 </span><span class="number">9954</span></span><br><span class="line"></span><br><span class="line"><span class="string">Elizabeth</span> <span class="string">B.</span> <span class="string">Mercier</span></span><br><span class="line"><span class="number">87</span> <span class="string">Park</span> <span class="string">Place</span></span><br><span class="line"><span class="string">CARTMEL</span></span><br><span class="line"><span class="string">LA11</span> <span class="string">9SG</span></span><br><span class="line"><span class="number">070</span> <span class="number">3303 </span><span class="number">8997</span></span><br><span class="line"></span><br><span class="line"><span class="string">Donna</span> <span class="string">S.</span> <span class="string">Hedges</span></span><br><span class="line"><span class="number">75</span> <span class="string">Simone</span> <span class="string">Weil</span> <span class="string">Avenue</span></span><br><span class="line"><span class="string">WEARE</span> <span class="string">GIFFARD</span></span><br><span class="line"><span class="string">EX39</span> <span class="string">1NX</span></span><br><span class="line"><span class="number">078</span> <span class="number">5843 </span><span class="number">7176</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">Cheryl</span> <span class="string">H.</span> <span class="string">Davis</span></span><br><span class="line"><span class="number">70</span> <span class="string">Bootham</span> <span class="string">Crescent</span></span><br><span class="line"><span class="string">RIDLINGTON</span></span><br><span class="line"><span class="string">NR28</span> <span class="string">2SU</span></span><br><span class="line"><span class="number">077</span> <span class="number">6454 </span><span class="number">6457</span></span><br><span class="line"></span><br><span class="line"><span class="string">Account</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">JMR76-FREE</span></span><br></pre></td></tr></table></figure><p>LocalTunnel ：<a href="https://theboroer.github.io/localtunnel-www/">https://theboroer.github.io/localtunnel-www/</a> 允许用户通过公网 URL 访问本地主机。</p><p>临时邮箱网站<br><a href="https://temp-mail.org">https://temp-mail.org</a></p><p>privatevpn</p><p>查看IP地址<br><a href="http://www.whoer.net">www.whoer.net</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://nic.eu.org&quot;&gt;https://nic.eu.org&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.fakenamegenerator.com&quot;&gt;https://www.fakenamegenerator.com&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-05T14:04:24.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="永久免费vps申请，超强配置，8核心，32G内存">永久免费vps申请，超强配置，8核心，32G内存</h3><p>永久云服务器申请连接：<a href="https://dashboard.render.com/">https://dashboard.render.com/</a></p><p>Githube注册连接：<a href="https://github.com/">https://github.com/</a></p><p>Docker代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 Ubuntu 22.04 作为基础镜像</span></span><br><span class="line">FROM ubuntu:22.04</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 Shellinabox</span></span><br><span class="line">RUN apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y shellinabox &amp;&amp; \</span><br><span class="line">    apt-get clean &amp;&amp; \</span><br><span class="line">    <span class="built_in">rm</span> -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置 root 用户的密码为 &#x27;root&#x27;</span></span><br><span class="line">RUN <span class="built_in">echo</span> <span class="string">&#x27;root:frepai&#x27;</span> | chpasswd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暴露 22 端口</span></span><br><span class="line">EXPOSE 22</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 Shellinabox</span></span><br><span class="line">CMD [<span class="string">&quot;/usr/bin/shellinaboxd&quot;</span>, <span class="string">&quot;-t&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;/:LOGIN&quot;</span>]</span><br></pre></td></tr></table></figure><p>VPS申请完成之后，需要安装最基础的软件包，因为我们申请的是底层的unbutu操作系统，操作性非常强，需要什么就安装什么！</p><p>更新系统：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure><p>安装基础软件包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt install sudo curl wget nano screen git</span><br></pre></td></tr></table></figure><p>安装neofetch工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install neofetch</span><br></pre></td></tr></table></figure><p>调用显示系统信息命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neofetch</span><br></pre></td></tr></table></figure><p>[<a href="https://frepai.com/">https://frepai.com/</a>]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;永久免费vps申请，超强配置，8核心，32G内存&quot;&gt;永久免费vps申请，超强配置，8核心，32G内存&lt;/h3&gt;
&lt;p&gt;永久云服务器申请连接：&lt;a href=&quot;https://dashboard.render.com/&quot;&gt;https://dashboard.rend</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2024-01-05T14:04:24.259Z</published>
    <updated>2024-01-05T14:04:24.259Z</updated>
    
    <content type="html"><![CDATA[<h3 id="bpmn-js">bpmn.js</h3><p><strong>基本概念</strong></p><ul><li>diagram element 图表元素</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="symbol">id:</span> <span class="string">&quot;StartEvent_1y45yut&quot;</span>,</span><br><span class="line"><span class="symbol">type:</span> <span class="string">&quot;bpmn:StartEvent&quot;</span>,</span><br><span class="line"><span class="symbol">businessObject:</span> <span class="punctuation">&#123;</span></span><br><span class="line">$type: <span class="string">&quot;bpmn:StartEvent&quot;</span>,</span><br><span class="line"><span class="symbol">name:</span> <span class="string">&quot;开始&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>xml 标签称之为BPMN element</li></ul><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;startEvent <span class="attribute">id</span>=<span class="string">&quot;StartEvent_1y45yut&quot;</span> <span class="attribute">name</span>=<span class="string">&quot;开始&quot;</span>&gt;&lt;/startEvent&gt;</span><br></pre></td></tr></table></figure><ul><li>官方 Panel</li></ul><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span> 这里引入的是右侧属性栏这个框</span><br><span class="line">import propertiesPanelModule from <span class="string">&#x27;bpmn-js-properties-panel&#x27;</span></span><br><span class="line"><span class="regexp">//</span> 而这个引入的是右侧属性栏里的内容</span><br><span class="line">import propertiesProviderModule from <span class="string">&#x27;bpmn-js-properties-panel/lib/provider/camunda&#x27;</span></span><br><span class="line"></span><br><span class="line">additionalModules: [</span><br><span class="line">  propertiesPanelModule,</span><br><span class="line">  propertiesProviderModule</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> propertiesPanelModule 表示的是属性栏这个框, 就是告诉别人这里要有个属性栏;</span><br><span class="line"><span class="regexp">//</span> propertiesProviderModule 表示的是属性栏里的内容, 也就是点击不同的element该显示什么内容.</span><br></pre></td></tr></table></figure><ul><li>两者的一些属性关联起来靠的是一个叫做businessObject的属性</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;bpmn-js&quot;&gt;bpmn.js&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;基本概念&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;diagram element 图表元素&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2023-07-22T05:48:18.729Z</published>
    <updated>2023-07-22T05:48:19.350Z</updated>
    
    <content type="html"><![CDATA[<h3 id="统计代码行数">统计代码行数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --format=<span class="string">&#x27;%aN&#x27;</span> | <span class="built_in">sort</span> -u | <span class="keyword">while</span> <span class="built_in">read</span> name; <span class="keyword">do</span> <span class="built_in">echo</span> -en <span class="string">&quot;<span class="variable">$name</span>\t&quot;</span>; git <span class="built_in">log</span> --author=<span class="string">&quot;<span class="variable">$name</span>&quot;</span> --pretty=tformat: --since ==2022–01-01 --<span class="keyword">until</span>=2022-12-30 --numstat | awk <span class="string">&#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span> -; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="Git-Tag-管理">Git Tag 管理</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">tag</span> <span class="title">列出所有tag</span></span><br><span class="line"></span><br><span class="line">git fetch --tags 下载所有 <span class="keyword">tag</span> <span class="title">至本地</span></span><br><span class="line"><span class="title"></span></span><br><span class="line"><span class="title">git</span> checkout tagName 切换至指定<span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="title">git</span> <span class="keyword">tag</span> <span class="title">-l</span> | xargs git <span class="keyword">tag</span> <span class="title">-d</span> <span class="comment">#删除所有本地分支</span></span><br><span class="line">git fetch origin --prune <span class="comment">#从远程拉取所有信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询远程tags的命令如下：</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="keyword">tag</span>常用git命令：</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">#列出所有tag</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-l</span> v1.* <span class="comment">#列出符合条件的tag（筛选作用）</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">#创建轻量tag</span>（无-m标注信息）</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> -m ‘first <span class="keyword">version</span>’ <span class="comment">#创建含标注tag</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> f1bb97a(commit id) <span class="comment">#为之前提交打tag</span></span><br><span class="line"></span><br><span class="line">git push origin --tags <span class="comment">#推送所有本地tag到远程</span></span><br><span class="line">git push origin <span class="comment">#推送指定本地tag到远程</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> <span class="comment">#删除本地指定tag</span></span><br><span class="line">git push origin --delete tagName <span class="comment">#删除远程指定tag</span></span><br><span class="line"></span><br><span class="line">git fetch origin <span class="comment">#拉取远程指定tag</span></span><br><span class="line">git show <span class="comment">#显示指定tag详细信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="临时参考">临时参考</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">git 如何在本地同步远程分支和<span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="title">1</span>.git如何同步本地分支与远程origin的分支</span><br><span class="line">问题场景<span class="number">1</span>：</span><br><span class="line">同事A创建了本地分支branchA并push到了远程-&gt;同事B在本地拉取(git fetch)了和远程branchA同步的本地分支branchA-&gt;同事A开发完成将远程分支branchA删除（远程仓库已经不存在分支branchA）-&gt;同事B用git fetch同步远端分支，git branch -r发现本地仍然记录有branchA的远程分支</span><br><span class="line"></span><br><span class="line">分析：远端有新增分支，git fetch可以同步到新的分支到本地，但是远端有删除分支，直接<span class="string">&quot;git fetch&quot;</span>是不能将远程已经不存在的branch等在本地删除的</span><br><span class="line"></span><br><span class="line">解决方法：</span><br><span class="line">git fetch --prune <span class="comment">#这样就可以实现在本地删除远程已经不存在的分支</span></span><br><span class="line">或者简略：</span><br><span class="line">git fetch -p</span><br><span class="line">git fetch -p origin</span><br><span class="line">git remote prune origin</span><br><span class="line"></span><br><span class="line">branch常用的命令：</span><br><span class="line">git branch -a <span class="comment">#查看本地和远程所有的分支</span></span><br><span class="line">git branch -r <span class="comment">#查看所有远程分支</span></span><br><span class="line">git branch <span class="comment">#查看所有本地分支</span></span><br><span class="line">git branch -d -r origin/branchA <span class="comment">#删除远程分支</span></span><br><span class="line"></span><br><span class="line">其他较常用的命令</span><br><span class="line">git fetch <span class="comment">#将本地分支与远程保持同步</span></span><br><span class="line">git checkout -b 本地分支名x origin/远程分支名x <span class="comment">#拉取远程分支并同时创建对应的本地分支</span></span><br><span class="line"></span><br><span class="line">问题场景<span class="number">2</span>：</span><br><span class="line">本地分支提示：Git Your branch is ahead of ‘origin/<span class="literal">master</span>’ by X commits，你想让本地直接和远程保持同步，想让不再提示这个讨厌信息，那么如果你本地的commit确保不想要，可以如下操作：</span><br><span class="line">解决方法：</span><br><span class="line"><span class="number">1</span>）git reset --hard origin/<span class="keyword">master</span></span><br><span class="line"></span><br><span class="line"><span class="title">或者还有一个将本地代码与服务器代码更新一致的语句</span></span><br><span class="line"><span class="title">2</span>）git branch -u origin/<span class="keyword">master</span></span><br><span class="line"></span><br><span class="line"><span class="title">如果想直接回退版本让远程和本地代码保持一致，那就确保本地代码没问题之后强制推到远程</span></span><br><span class="line"><span class="title">git</span> push -f origin <span class="keyword">master</span></span><br><span class="line"></span><br><span class="line"><span class="title">2</span>.git 如何同步本地<span class="keyword">tag</span>与远程<span class="keyword">tag</span></span><br><span class="line"><span class="title">问题场景：</span></span><br><span class="line"><span class="title">同事A</span>在本地创建tagA并push同步到了远程-&gt;同事B在本地拉取了远程tagA(git fetch)-&gt;同事A工作需要将远程标签tagA删除-&gt;同事B用git fetch同步远端信息，git <span class="keyword">tag</span>后发现本地仍然记录有tagA</span><br><span class="line"></span><br><span class="line">分析：对于远程repository中已经删除了的<span class="keyword">tag</span>，即使使用git fetch --prune，甚至<span class="string">&quot;git fetch --tags&quot;</span>确保下载所有tags，也不会让其在本地也将其删除的。而且，似乎git目前也没有提供一个直接的命令和参数选项可以删除本地的在远程已经不存在的<span class="keyword">tag</span>（我目前是没找到有关这类<span class="keyword">tag</span>问题的git命令~~，有知道的同学可以告知我下，互相进步）。</span><br><span class="line">解决方法：</span><br><span class="line"></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-l</span> | xargs git <span class="keyword">tag</span> <span class="title">-d</span> <span class="comment">#删除所有本地分支</span></span><br><span class="line">git fetch origin --prune <span class="comment">#从远程拉取所有信息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查询远程tags的命令如下：</span></span><br><span class="line">git ls-remote --tags origin</span><br><span class="line"></span><br><span class="line"><span class="keyword">tag</span>常用git命令：</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">#列出所有tag</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-l</span> v1.* <span class="comment">#列出符合条件的tag（筛选作用）</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">#创建轻量tag</span>（无-m标注信息）</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> -m ‘first <span class="keyword">version</span>’ <span class="comment">#创建含标注tag</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> f1bb97a(commit id) <span class="comment">#为之前提交打tag</span></span><br><span class="line"></span><br><span class="line">git push origin --tags <span class="comment">#推送所有本地tag到远程</span></span><br><span class="line">git push origin <span class="comment">#推送指定本地tag到远程</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> <span class="comment">#删除本地指定tag</span></span><br><span class="line">git push origin :refs/tags/ <span class="comment">#删除远程指定tag</span></span><br><span class="line"></span><br><span class="line">git fetch origin <span class="comment">#拉取远程指定tag</span></span><br><span class="line">git show <span class="comment">#显示指定tag详细信息</span></span><br></pre></td></tr></table></figure><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 轻量标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">tagname</span></span><br><span class="line">eg: git <span class="keyword">tag</span> <span class="title">v1</span>.<span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 附注标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> tagname -m &#x27;<span class="keyword">tag</span> <span class="title">describe</span>&#x27;</span><br><span class="line">eg: git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">4</span> -m &#x27;my <span class="keyword">version</span> <span class="number">1.4</span>&#x27;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对某个历史提交打标签</span></span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-a</span> <span class="tag">&lt;tagname&gt;</span> <span class="tag">&lt;sha-1&gt;</span></span><br><span class="line">eg: git <span class="keyword">tag</span> <span class="title">-a</span> v1.<span class="number">2</span> <span class="number">9</span>fceb02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有标签</span></span><br><span class="line">git <span class="keyword">tag</span></span><br><span class="line"></span><br><span class="line"><span class="title"># 查看1</span>.<span class="number">8</span>系列</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-l</span> &#x27;v1.<span class="number">8</span>.*&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">删除标签</span><br><span class="line">git <span class="keyword">tag</span> <span class="title">-d</span> <span class="tag">&lt;tagname&gt;</span></span><br><span class="line">eg: git <span class="keyword">tag</span> <span class="title">-d</span> v1.<span class="number">4</span>-lw</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 共享标签</span></span><br><span class="line">默认情况下，git push 命令并不会传送标签到远程仓库服务器上。</span><br><span class="line">如果要共享标签，必须显示的推送标签到远程仓库。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送单个标签</span></span><br><span class="line">git push origin <span class="tag">&lt;tagname&gt;</span></span><br><span class="line">eg: git push origin v1.<span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有标签</span></span><br><span class="line">git push origin --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程标签</span></span><br><span class="line">git push origin --delete <span class="tag">&lt;tagname&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>git log：该命令显示从最近到最远的提交日志。</p><p>git log - -pretty=oneline：将只会显示提交的commit id号和对应的注释。(这里是两个-，Markdown显示两个-为一个-)</p><p>如果你在本地做了错误提交，那么回退版本的方法很简单<br>1.先用下面命令找到要回退的版本的commit id：git reflog<br>2.接着回退版本: git reset –hard commit id</p><p>回退远程分支</p><ol><li>git push -f origin master</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;统计代码行数&quot;&gt;统计代码行数&lt;/h3&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2023-07-19T13:44:02.762Z</published>
    <updated>2023-07-19T13:44:03.089Z</updated>
    
    <content type="html"><![CDATA[<h1>kong</h1><blockquote><p>网关是微服务中不可或缺的一部分，它承载了所有请求流量入口，参数验证拦截，用户权限验证，但是除了JAVA的spring cloud之外，公共网关屈指可数，其中最受关注的就是KONG了</p></blockquote><h1>下载kong镜像</h1><p>docker pull kong</p><h1>命名 kong</h1><p>docker tag kong kong</p><h1>下载konga</h1><p>docker pull pantsel/konga</p><h1>声明网络</h1><p>docker network create kong-net</p><h1>查看网络</h1><p>docker network ls</p><h1>下载数据库</h1><p>docker pull postgres:9.6</p><h1>创建数据库存储卷</h1><p>docker volume create kong-volume</p><h1>运行数据库（使用 postgres）</h1><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name kong-database --network=kong-net  -v kong-volume:/var/lib/postgresql/data   -p <span class="number">5432</span>:<span class="number">5432</span>   -e <span class="string">&quot;POSTGRES_USER=kong&quot;</span>   -e <span class="string">&quot;POSTGRES_DB=kong&quot;</span>   -e <span class="string">&quot;POSTGRES_PASSWORD=kong&quot;</span>   postgres:<span class="number">9</span>.<span class="number">6</span></span><br></pre></td></tr></table></figure><h1>准备数据库数据和配置</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">run</span> --rm <span class="attribute">--network</span>=kong-net -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> -e <span class="string">&quot;KONG_PG_HOST=172.27.48.1&quot;</span> -e <span class="string">&quot;KONG_PG_PASSWORD=kong&quot;</span> -e <span class="string">&quot;KONG_PASSWORD=kong&quot;</span> -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> kong:latest kong migrations bootstrap</span><br></pre></td></tr></table></figure><h1>启动 kong-service</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d --name kong --network=kong-net -e <span class="string">&quot;KONG_DATABASE=postgres&quot;</span> -e <span class="string">&quot;KONG_PG_HOST=kong-database&quot;</span> -e <span class="string">&quot;KONG_CASSANDRA_CONTACT_POINTS=kong-database&quot;</span> -e <span class="string">&quot;KONG_PROXY_ACCESS_LOG=/dev/stdout&quot;</span> -e <span class="string">&quot;KONG_ADMIN_ACCESS_LOG=/dev/stdout&quot;</span> -e <span class="string">&quot;KONG_PROXY_ERROR_LOG=/dev/stderr&quot;</span> -e <span class="string">&quot;KONG_ADMIN_ERROR_LOG=/dev/stderr&quot;</span> -e <span class="string">&quot;KONG_ADMIN_LISTEN=0.0.0.0:8001, 0.0.0.0:8444 ssl&quot;</span> -p <span class="number">8443</span>:<span class="number">8443</span> -p <span class="number">127.0.0.1:8001</span>:<span class="number">8001</span> -p <span class="number">127.0.0.1:8444</span>:<span class="number">8444</span> kong</span><br></pre></td></tr></table></figure><h1>为 konga 创建数据表</h1><p>docker run --rm pantsel/konga -c prepare -a postgres -u postgresql://kong:kong@172.27.48.1/konga</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;kong&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;网关是微服务中不可或缺的一部分，它承载了所有请求流量入口，参数验证拦截，用户权限验证，但是除了JAVA的spring cloud之外，公共网关屈指可数，其中最受关注的就是KONG了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jahaw.github.io/posts/0.html"/>
    <id>https://jahaw.github.io/posts/0.html</id>
    <published>2023-07-18T13:37:03.330Z</published>
    <updated>2023-07-18T13:37:03.330Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ajreport</strong><br><strong>chudayun</strong><br><strong>datagear</strong><br><strong>jimureport</strong></p><h3 id="基于-HTML5-Canvas-的交互式地铁线路图">基于 HTML5 Canvas 的交互式地铁线路图</h3><ul><li><a href="https://www.hightopo.com/demo/subway/index.html">https://www.hightopo.com/demo/subway/index.html</a></li></ul><p>PC 扫码原理？</p><p>网页端展示二维码，同时不断的向服务端发送请求询问该二维码的状态；<br>手机端扫描二维码，读取二维码成功后，跳转至确认登录页，若用户确认登录，则服务器修改二维码状态，并返回用户登录信息；<br>网页端收到服务器端二维码状态改变，则跳转登录后页面；<br>若超过一定时间用户未操作，网页端二维码失效，需要重新刷新生成新的二维码。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;ajreport&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;chudayun&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;datagear&lt;/strong&gt;&lt;br&gt;
&lt;strong&gt;jimureport&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;基于-HTML</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Cookie、Session、Token 与 JWT 解析</title>
    <link href="https://jahaw.github.io/posts/379ad06d.html"/>
    <id>https://jahaw.github.io/posts/379ad06d.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<h1>Cookie、Session、Token 与 JWT 解析</h1><h2 id="认证、授权与凭证">认证、授权与凭证</h2><h3 id="什么是认证（Authentication）？"><strong>什么是认证（Authentication）？</strong></h3><ul><li>通俗地讲就是<strong>验证当前用户的身份是否合法的过程</strong>，即你是谁？证明“你是你自己”（比如：你每天上下班打卡，都需要通过指纹打卡，当你的指纹和系统里录入的指纹相匹配时，就打卡成功）</li><li>互联网中的认证：**用户名密码登录；邮箱发送登录链接；手机号接收验证码。**只要你能收到邮箱/验证码，就默认你是账号的主人！认证主要是为了保护系统的隐私数据与资源。</li><li>拓展：什么是会话？认证通过后，为了避免用户每次操作都进行认证（除银行转账等），可以将用户信息保存在会话中，<strong>会话就是系统为了保存当前用户的登录状态所提供的机制</strong>，常见的有基于 Session 和 token 的方式，具体见下文。</li></ul><h3 id="什么是授权（Authorization）？"><strong>什么是授权（Authorization）？</strong></h3><ul><li>简单来讲就是<strong>谁（who）对什么（what）进行了什么操作（how）</strong>。认证是保证用户的合法性，授权则是为了更细粒度的对隐私数据的划分。<strong>*授权是在认证通过后，控制不同的用户访问不同的资源。</strong></li><li><strong>用户授予第三方应用访问该用户某些资源的权限</strong>。比如，你在安装手机应用的时候，APP 会询问是否允许授予权限（访问相册、地理位置等权限）；你在访问微信小程序时，当登录时，小程序会询问是否允许授予权限（获取昵称、头像、地区、性别等个人信息）</li><li>**实现授权的方式有：**业界通常基于 R(role/resource)BAC 实现授权：(1)基于角色的访问控制（2）基于资源（权限）的访问控制，系统设计时定义好某项操作的权限标识，系统扩展性好。</li></ul><h3 id="什么是凭证（Credentials）"><strong>什么是凭证（Credentials）</strong></h3><ul><li><strong>实现认证和授权的前提</strong>是需要一种<strong>媒介（证书）</strong> 来标记访问者的身份。</li><li>例如：在战国时期，商鞅变法，发明了照身帖。照身帖由官府发放，是一块打磨光滑细密的竹板，上面刻有持有人的头像和籍贯信息。国人必须持有，如若没有就被认为是黑户，或者间谍之类的。在现实生活中，每个人都会有一张专属的居民身份证，是用于证明持有人身份的一种法定证件。通过身份证，我们可以办理手机卡/银行卡/个人贷款/交通出行等等，这就是<strong>认证的凭证。</strong></li><li>在互联网应用中，一般网站会有两种模式，游客模式和登录模式。游客模式下，可以正常浏览网站上面的文章，一旦想要点赞/收藏/分享文章，就需要登录或者注册账号。当用户登录成功后，服务器会给该用户使用的浏览器颁发一个<strong>令牌（token）</strong>，这个令牌用来表明你的身份，每次浏览器发送请求时会带上这个令牌，就可以使用游客模式下无法使用的功能。</li></ul><h2 id="Cookie-与-Session"><strong>Cookie 与 Session</strong></h2><h3 id="什么是-Cookie？">什么是 Cookie？</h3><ul><li><strong>HTTP 是无状态的协议（对于事务处理没有记忆能力，每次客户端和服务端会话完成时，服务端不会保存任何会话信息</strong>）：每个请求都是完全独立的，服务端无法确认当前访问者的身份信息，无法分辨上一次的请求发送者和这一次的发送者是不是同一个人。所以服务器与浏览器为了进行<strong>会话跟踪</strong>（知道是谁在访问我），就必须主动的去维护一个状态，这个状态用于告知服务端前后两个请求是否来自同一浏览器。而<strong>这个状态需要通过 cookie 或者 session 去实现。</strong></li><li><strong>cookie 存储在客户端：</strong> cookie 是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。</li><li><strong>cookie 是不可跨域的：</strong> 每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用，<strong>一级域名和二级域名之间是允许共享使用的</strong>（<strong>靠的是 domain）</strong>。</li></ul><p><strong>cookie 重要的属性</strong></p><h3 id="什么是-Session"><strong>什么是 Session</strong></h3><ul><li><strong>session 是另一种记录服务器和客户端会话状态的机制</strong>，即告诉服务端前后两个请求是否来自同一个客户端（浏览器），知道谁在访问我。<strong>因为 http 本身是无状态协议</strong>，这样，无法确定你的本次请求和上次请求是不是你发送的。如果要进行类似论坛登陆相关的操作，就实现不了了。</li><li><strong>session 是基于 cookie 实现的，session 存储在服务器端，sessionId 会被存储到客户端的 cookie 中</strong>。ps：还有一种是浏览器禁用了 cookie 或不支持 cookie，这种可以通过 URL 重写的方式发到服务器；</li></ul><p><strong>session 认证流程（如上图）：</strong></p><ul><li>用户第一次请求服务器的时候，服务器根据用户提交的相关信息，<strong>创建对应的 Session</strong></li><li>请求返回时将此 Session 的<strong>唯一标识信息 SessionID</strong> 返回给浏览器</li><li>浏览器接收到服务器返回的 SessionID 信息后，会<strong>将此信息存入到 Cookie 中，同时 Cookie 记录此 SessionID 属于哪个域名</strong></li><li><strong>当用户第二次访问服务器的时候，请求会自动判断此域名下是否存在 Cookie 信息</strong>，如果存在自动将 Cookie 信息也发送给服务端，服务端会从 Cookie 中获取 SessionID，再根据 SessionID 查找对应的 Session 信息，如果没有找到说明用户没有登录或者登录失效，如果找到 Session 证明用户已经登录可执行后面操作。</li></ul><p>根据以上流程可知，<strong>SessionID 是连接 Cookie 和 Session 的一道桥梁</strong>，大部分系统也是根据此原理来<strong>验证用户登录状态。</strong></p><p>基于 Session 的认证机制由 Servlet 规范定制，Servlet 容器已经实现，用户通过 HttpSession 的操作方法可以实现：</p><h3 id="Cookie-和-Session-的区别"><strong>Cookie 和 Session 的区别</strong></h3><ul><li>**安全性：**Session 是存储在服务器端的，Cookie 是存储在客户端的。所以 Session 相比 Cookie 安全，</li><li><strong>存取值的类型不同</strong>：Cookie 只支持存字符串数据，想要设置其他类型的数据，需要将其转换成字符串，Session 可以存任意数据类型。</li><li><strong>有效期不同：</strong> Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭（默认情况下）或者 Session 超时都会失效。</li><li><strong>存储大小不同：</strong> 单个 Cookie 保存的数据不能超过 4K，Session 可存储数据远高于 Cookie，但是当访问量过多，会占用过多的服务器资源。</li></ul><h3 id="拓展：Session-痛点">拓展：Session 痛点</h3><p>看起来通过 cookie + session 的方式是解决了问题， 但是我们忽略了一个问题，上述情况能正常工作是因为我们假设 server 是单机工作的，但实际在生产上，为了保障高可用，一般服务器至少需要两台机器，通过负载均衡的方式来决定到底请求该打到哪台机器上。</p><p>假设登录请求打到了 A 机器，A 机器生成了 session 并在 cookie 里添加 sessionId 返回给了浏览器，那么问题来了：下次添加购物车时如果请求打到了 B 或者 C，由于 session 是在 A 机器生成的，此时的 B,C 是找不到 session 的，那么就会发生无法添加购物车的错误，就得重新登录了，此时请问该怎么办。主要有以下三种方式：</p><p>（1 ）session 复制</p><p>A 生成 session 后复制到 B, C，这样每台机器都有一份 session，无论添加购物车的请求打到哪台机器，由于 session 都能找到，故不会有问题</p><p>这种方式虽然可行，但缺点也很明显：</p><ul><li>同一样的一份 session 保存了多份，数据冗余</li><li>如果节点少还好，但如果节点多的话，特别是像阿里，微信这种由于 DAU 上亿，可能需要部署成千上万台机器，这样节点增多复制造成的性能消耗也会很大。</li></ul><p>（2）session 粘连</p><p>这种方式是让每个客户端请求只打到固定的一台机器上，比如浏览器登录请求打到 A 机器后，后续所有的添加购物车请求也都打到 A 机器上，Nginx 的 sticky 模块可以支持这种方式，支持按 ip 或 cookie 粘连等等，如按 ip 粘连方式如下</p><p>这样的话每个 client 请求到达 Nginx 后，只要它的 ip 不变，根据 ip hash 算出来的值会打到固定的机器上，也就不存在 session 找不到的问题了，当然不难看出这种方式缺点也是很明显，对应的机器挂了怎么办？</p><p>（3）session 共享</p><p>这种方式也是目前各大公司普遍采用的方案，将 session 保存在 redis，memcached 等中间件中，请求到来时，各个机器去这些中间件取一下 session 即可。</p><p>缺点其实也不难发现，就是每个请求都要去 redis 取一下 session，多了一次内部连接，消耗了一点性能，另外为了保证 redis 的高可用，必须做集群，当然了对于大公司来说, redis 集群基本都会部署，所以这方案可以说是大公司的首选了。</p><h2 id="Token（令牌）与-JWT（跨域认证）"><strong>Token（令牌）与</strong> JWT（跨域认证）</h2><h3 id="Token-概述（no-session-）">Token 概述（no session!）</h3><p>通过上文分析我们知道通过在服务端共享 session 的方式可以完成用户的身份定位，但是不难发现也有一个小小的瑕疵：搞个校验机制我还得搭个 redis 集群？大厂确实 redis 用得比较普遍，但对于小厂来说可能它的业务量还未达到用 redis 的程度，所以有没有其他不用 server 存储 session 的用户身份校验机制呢，使用 token！</p><p>简单来说：首先请求方输入自己的用户名，密码，然后 server 据此生成 token，客户端拿到 token 后会保存到本地（token 存储在浏览器端），之后向 server 请求时在请求头带上此 token 即可（server 有校验机制，检验 token 合法性，同时 server 通过 token 中携带的 uid 确定是谁在访问它）。</p><p><img src="images/token.webp" alt="token.webp"><br>可以看到 token 主要由三部分组成：</p><ul><li>header：指定了签名算法</li><li>payload：可以指定用户 id，过期时间等非敏感数据</li><li>Signature: 签名，server 根据 header 知道它该用哪种签名算法，再用密钥根据此签名算法对 head + payload 生成签名，这样一个 token 就生成了。</li></ul><p>当 server 收到浏览器传过来的 token 时，它会首先取出 token 中的 header + payload，根据密钥生成签名，然后再与 token 中的签名比对，如果成功则说明签名是合法的，即 token 是合法的。而且你会发现 payload 中存有我们的 userId，所以拿到 token 后直接在 payload 中就可获取 userid，避免了<strong>像 session 那样要从 redis 去取的开销</strong>。</p><p>你会发现这种方式确实很妙，只要 server 保证密钥不泄露，那么生成的 token 就是安全的，因为如果伪造 token 的话在签名验证环节是无法通过的，就此即可判定 token 非法。</p><p>可以看到通过这种方式有效地避免了 token 必须保存在 server 的弊端，实现了分布式存储，不过需要注意的是，token 一旦由 server 生成，它就是有效的，直到过期，无法让 token 失效，除非在 server 为 token 设立一个黑名单，在校验 token 前先过一遍此黑名单，如果在黑名单里则此 token 失效，但一旦这样做的话，那就意味着黑名单就必须保存在 server，这又回到了 session 的模式，那直接用 session 不香吗。所以一般的做法是当客户端登出要让 token 失效时，直接在本地移除 token 即可，下次登录重新生成 token 就好。</p><p>另外需要注意的是 <strong>token 一般是放在 header 的 Authorization 自定义头里，不是放在 Cookie 里的，这主要是为了解决跨域不能共享 Cookie 的问题</strong></p><p><strong>总结：token 解决什么问题（为什么要用 token）？</strong></p><ul><li><strong>完全由应用管理，可以避开同源策略</strong></li><li><strong>支持跨域访问，cookie 不支持</strong>， Cookie 跨站是不能共享的，这样的话如果你要实现多应用（多系统）的单点登录（SSO），使用 Cookie 来做需要的话就很困难了。但如果用 token 来实现 SSO 会非常简单，只要在 header 中的 authorize 字段（或其他自定义）加上 token 即可完成所有跨域站点的认证。</li><li><strong>token 是无状态的，可以在多个服务器间共享</strong></li><li><strong>token 可以避免 CSRF 攻击（跨站请求攻击）</strong></li><li>易于扩展，在移动端原生请求是没有 cookie 之说的，而 sessionid 依赖于 cookie，sessionid 就不能用 cookie 来传了，如果用 token 的话，由于它是随着 header 的 authoriize 传过来的，也就不存在此问题，换句话说 token 天生支持移动平台，可扩展性好</li></ul><blockquote><p><strong>拓展 1：那啥是 CSRF 呢？</strong></p></blockquote><p>攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。<strong>由于浏览器曾经认证过（cookie 里带来 sessionId 等身份认证的信息），所以被访问的网站会认为是真正的用户操作而去运行。</strong></p><p>那么如果正常的用户误点了上面这张图片，由于相同域名的请求会自动带上 cookie，而 cookie 里带有正常登录用户的 sessionid，类似上面这样的转账操作在 server 就会成功，会造成极大的安全风险</p><p><strong>CSRF 攻击的根本原因在于对于同样域名的每个请求来说，它的 cookie 都会被自动带上，这个是浏览器的机制决定的！</strong></p><p>至于完成一次 CSRF 攻击必要的两个步骤：</p><p>1、首先登了一个正常的网站 A，并且在本地生成了 cookie<br>2、在 cookie 有效时间内，访问了危险网站 B（就获取了身份信息）</p><p>Q：那我不访问危险网站就完了呗？<br><strong>A：危险网站也许只是个存在漏洞的可信任网站！</strong></p><p>Q：那我访问完正常网站，关了浏览器就好了呀？<br><strong>A：即使关闭浏览器，cookie 也不保证一定立即失效，而且关闭浏览器并不能结束会话，session 的生命周期跟这些都没关系。</strong></p><blockquote><p><strong>拓展 2：同源策略？</strong></p></blockquote><ul><li>就是不同源的客户端脚本在没有明确授权情况下，不准读写对方的资源！</li><li><strong>同源就是：协议、域名与端口号都相同。</strong></li><li>同源策略是由 Netscape 提出的著名安全策略，是浏览器最核心、基本的安全功能，它限制了一个源中加载脚本与来自其他源中资源的交互方式。</li></ul><blockquote><p><strong>拓展 3：什么是跨域，如何解决？</strong></p></blockquote><ul><li><p>当浏览器执行脚本时会<strong>检查是否同源</strong>，只有同源的脚本才会执行，如果不同源即为跨域。</p></li><li><p><strong>产生原因</strong>：它是由<strong>浏览器的同源策略</strong>造成的，是浏览器对 JavaScript 实施的安全限制。</p></li><li><p><strong>解决方案</strong>：</p><ul><li><strong>nginx（静态服务器）反向代理解决跨域</strong>（前端常用），<strong>a 明确访问 c 代理服务器</strong>，但是不知道 c 的内容从哪里来，c 反向从别的地方拿来数据。(忽略的是目标地址)，<strong>浏览器可以访问 a,而服务器之间不存在跨域问题</strong>，浏览器先访问 a 的服务器 c，让 c 服务器作为代理去访问 b 服务器,拿到之后再返回数据给 a。</li><li>jsonp：通常为了减轻 web 服务器的负载，我们把 js、css、图片等静态资源分离到另一台独立域名的服务器上，在 html 页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许。</li><li>添加响应头</li></ul></li></ul><blockquote><p>拓展 4：易于扩展？</p></blockquote><ul><li>比如有多台服务器，使用<strong>负载均衡</strong>，第一次登录转发到了 A，A 中 seesion 缓存了用户的登录信息，第二次登录转发到了 B，这时候就丢失了登录状态，当然这样也是有解决方案可以共享 session，但<strong>token 只需要所有的服务器使用相同的解密手段即可。</strong></li></ul><blockquote><p>拓展 5：无状态？</p></blockquote><ul><li>服务端不保存客户端请求者的任何信息，<strong>客户端每次请求必须自备描述信息，通过这些信息来识别客户端身份。服务端只需要确认该 token 是否是自己亲自签发即可，签发和验证都在服务端进行。</strong></li></ul><blockquote><p><strong>拓展 6：什么是单点登录？</strong></p></blockquote><ul><li>所谓单点登录，是指在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。</li></ul><h4 id="Acesss-Token">Acesss Token</h4><ul><li><strong>访问资源接口（API）时所需要的资源凭证</strong></li><li><strong>简单 token 的组成：</strong> uid(用户唯一的身份标识)、time(当前时间的时间戳)、sign（签名，token 的前几位以哈希算法压缩成的一定长度的十六进制字符串）</li></ul><p><strong>特点：</strong></p><ul><li><strong>服务端无状态化、可扩展性好</strong></li><li><strong>支持移动端设备</strong></li><li>安全性高</li><li>支持跨程序调用</li></ul><p><strong>token 的身份验证流程：</strong></p><ol><li>客户端使用用户名跟密码请求登录</li><li>服务端收到请求，去验证用户名与密码</li><li><strong>验证成功后，服务端会签发一个 token 并把这个 token 发送给客户端</strong></li><li>客户端收到 token 以后，会把它存储起来，比如放在 cookie 里或者 localStorage 里</li><li>客户端每次向服务端请求资源的时候需要带着服务端签发的 token</li><li>服务端收到请求，然后去验证客户端请求里面带着的 token ，<strong>如果验证成功，就向客户端返回请求的数据</strong></li></ol><p><strong>注意点</strong>：</p><ul><li><strong>每一次请求都需要携带 token，需要把 token 放到 HTTP 的 Header 里</strong></li><li><strong>基于 token 的用户认证是一种服务端无状态的认证方式，服务端不用存放 token 数据。用解析 token 的计算时间换取 session 的存储空间，从而减轻服务器的压力，减少频繁的查询数据库</strong></li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li></ul><h4 id="Refresh-Token"><strong>Refresh Token</strong></h4><ul><li>另外一种 token——refresh token</li><li>refresh token 是专用于刷新 access token 的 token。如果没有 refresh token，也可以刷新 access token，但每次刷新都要用户输入登录用户名与密码，会很麻烦。有了 refresh token，可以减少这个麻烦，客户端直接用 refresh token 去更新 access token，无需用户进行额外的操作。</li></ul><p><strong>两者区别</strong>：</p><ul><li>Access Token 的有效期比较短，当 Acesss Token 由于过期而失效时，使用 Refresh Token 就可以获取到新的 Token，如果 Refresh Token 也失效了，用户就只能重新登录了。</li><li>Refresh Token 及过期时间是存储在服务器的数据库中，只有在申请新的 Acesss Token 时才会验证，不会对业务接口响应时间造成影响，也不需要向 Session 一样一直保持在内存中以应对大量的请求。</li></ul><h3 id="Token-的缺点"><strong>Token 的缺点</strong></h3><p>那有人就问了，既然 token 这么好，那为什么各个大公司几乎都采用共享 session 的方式呢，可能很多人是第一次听到 token，token 不香吗? token 有以下两点劣势：</p><ul><li>token 太长了：<strong>token 是 header, payload 编码后的样式，所以一般要比 sessionId 长很多</strong>，很有可能超出 cookie 的大小限制（cookie 一般有大小限制的，如 4kb），如果你在 token 中存储的信息越长，那么 token 本身也会越长，这样的话由于你每次请求都会带上 token，对请求来是个不小的负担</li><li>不太安全：网上很多文章说 token 更安全，其实不然，细心的你可能发现了，我们说 token 是存在浏览器的，再细问，存在浏览器的哪里？既然它太长放在 cookie 里可能导致 cookie 超限，那就只好放在 local storage 里，这样会造成安全隐患，<strong>因为 local storage 这类的本地存储是可以被 JS 直接读取的，另外由上文也提到，token 一旦生成无法让其失效，必须等到其过期才行，这样的话如果服务端检测到了一个安全威胁，也无法使相关的 token 失效。</strong></li></ul><p><strong>所以 token 更适合一次性的命令认证，设置一个比较短的有效期！！！</strong></p><p>拓展：不管是 cookie 还是 token，<strong>从存储角度来看其实都不安全（实际上防护 CSRF 攻击的正确方式是用 CSRF token），都有暴露的风险，我们所说的安全更多的是强调传输中的安全，可以用 HTTPS 协议来传输， 这样的话请求头都能被加密，也就保证了传输中的安全。</strong></p><p>其实我们把 cookie 和 token 比较本身就不合理，一个是存储方式，一个是验证方式，正确的比较应该是 session vs token。</p><h3 id="Token-和-Session-的区别"><strong>Token 和 Session 的区别</strong></h3><p><strong>token 和 session 其实都是为了身份验证，session 一般翻译为会话，而 token 更多的时候是翻译为令牌；session 和 token 都是有过期时间一说，都需要去管理过期时间；</strong></p><ul><li>Session 是一种<strong>记录服务器和客户端会话状态的机制，使服务端有状态化，可以记录会话信息</strong>（可能保存在缓存、文件或数据库）。而 Token 是<strong>令牌</strong>，<strong>访问资源接口（API）时所需要的资源凭证</strong>。Token <strong>使服务端无状态化，不会存储会话信息。</strong></li><li>**其实 token 与 session 的问题是一种时间与空间的博弈问题，session 是空间换时间，而 token 是时间换空间。两者的选择要看具体情况而定。**虽然确实都是“客户端记录，每次访问携带”，但 token 很容易设计为自包含的，也就是说，后端不需要记录什么东西，每次一个无状态请求，每次解密验证，每次当场得出合法 /非法的结论。这一切判断依据，除了固化在 CS 两端的一些逻辑之外，整个信息是自包含的。这才是真正的无状态。 而 sessionid ，一般都是一段随机字符串，需要到后端去检索 id 的有效性。万一服务器重启导致内存里的 session 没了呢？万一 redis 服务器挂了呢？</li><li>所谓 Session 认证只是简单的把 User 信息存储到 Session 里，因为 SessionID 的不可预测性，暂且认为是安全的。而 Token ，如果指的是 OAuth Token 或类似的机制的话，提供的是 认证 和 授权 ，认证是针对用户，授权是针对 App 。<strong>其目的是让某 App 有权利访问某用户的信息</strong>。这里的 Token 是唯一的。不可以转移到其它 App 上，也不可以转到其它用户上。Session 只提供一种简单的认证，即只要有此 SessionID ，即认为有此 User 的全部权利。是需要严格保密的，这个数据应该只保存在站方，不应该共享给其它网站或者第三方 App。所以简单来说：<strong>如果你的用户数据可能需要和第三方共享，或者允许第三方调用 API 接口，用 Token 。如果永远只是自己的网站，自己的 App，用什么就无所谓了。</strong></li></ul><h3 id="JWT-概述"><strong>JWT 概述</strong></h3><ul><li>JSON Web Token（简称 JWT）是目前最流行的<strong>跨域认证</strong>解决方案。是一种<strong>认证授权机制</strong>。</li><li>JWT 是为了在网络应用环境间<strong>传递声明</strong>而执行的一种基于 JSON 的开放标准（RFC 7519）。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源。比如用在用户登录上。</li><li>可以使用 HMAC 算法或者是 RSA 的公/私秘钥对 JWT 进行签名。因为数字签名的存在，这些传递的信息是可信的。</li><li><strong>阮一峰老师的 JSON Web Token 入门教程 讲的非常通俗易懂，这里就不再班门弄斧了</strong></li></ul><h4 id="生成-JWT"><strong>生成 JWT</strong></h4><ul><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjwt.io%2F">https://jwt.io/</a></li><li><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.jsonwebtoken.io%2F">https://www.jsonwebtoken.io/</a></li></ul><h4 id="JWT-的原理"><strong>JWT 的原理</strong></h4><p><strong>JWT 认证流程：</strong></p><ul><li><p>用户输入用户名/密码登录，<strong>服务端认证成功后，会返回给客户端一个 JWT</strong></p></li><li><p>客户端将 token 保存到本地（通常使用 localstorage，也可以使用 cookie）</p></li><li><p>当用户希望访问一个受保护的路由或者资源的时候，需要请求头的 Authorization 字段中使用 Bearer 模式添加 JWT，其内容看起来是下面这样</p><p>Authorization: Bearer <token></p></li><li><p>服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为</p></li><li><p>因为 JWT 是自包含的（内部包含了一些会话信息），因此减少了需要查询数据库的需要</p></li><li><p>因为 JWT 并不使用 Cookie 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</p></li><li><p>因为用户的状态不再存储在服务端的内存中，所以这是一种<strong>无状态的认证机制</strong></p></li></ul><h4 id="JWT-的使用方式"><strong>JWT 的使用方式</strong></h4><h4 id="方式一"><strong>方式一</strong></h4><ul><li><p><strong>当用户希望访问一个受保护的路由或者资源的时候</strong>，可以把它放在 Cookie 里面自动发送，但是这样不能跨域，所以<strong>更好的做法是放在 HTTP 请求头信息的 Authorization 字段里，使用 Bearer 模式添加 JWT。</strong></p><p>GET /calendar/v1/events</p></li><li><p>用户的状态不会存储在服务端的内存中，这是一种 <strong>无状态的认证机制</strong></p></li><li><p>服务端的保护路由将会检查请求头 Authorization 中的 JWT 信息，如果合法，则允许用户的行为。</p></li><li><p>由于 JWT 是自包含的，因此减少了需要查询数据库的需要</p></li><li><p>JWT 的这些特性使得我们可以完全依赖其无状态的特性提供数据 API 服务，甚至是创建一个下载流服务。</p></li><li><p>因为 JWT 并不使用 Cookie ，所以你可以使用任何域名提供你的 API 服务而<strong>不需要担心跨域资源共享问题</strong>（CORS）</p></li></ul><h4 id="方式二"><strong>方式二</strong></h4><ul><li>跨域的时候，可以把 JWT 放在 POST 请求的数据体里。</li></ul><h4 id="方式三"><strong>方式三</strong></h4><ul><li><p>通过 URL 传输</p><p><a href="http://www.example.com/user?token=xxx">http://www.example.com/user?token=xxx</a></p></li></ul><h4 id="项目中使用-JWT"><strong>项目中使用 JWT</strong></h4><p>项目地址：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fyjdjiayou%2Fjwt-demo">https://github.com/yjdjiayou/jwt-demo</a></p><h4 id="Token-和-JWT-的区别"><strong>Token 和 JWT 的区别</strong></h4><p><strong>相同：</strong></p><ul><li>都是<strong>访问资源的令牌</strong></li><li>都可以<strong>记录用户的信息</strong></li><li>都是<strong>使服务端无状态化</strong></li><li>都是<strong>只有验证成功</strong>后，<strong>客户端才能访问服务端上受保护的资源</strong></li></ul><p><strong>区别：</strong></p><ul><li>Token：服务端验证客户端发送过来的 Token 时，<strong>还需要查询数据库获取用户信息</strong>，然后验证 Token 是否有效。</li><li>JWT：将 Token 和 Payload 加密后存储于客户端，服务端只需要使用密钥解密进行校验（校验也是 JWT 自己实现的）即可，<strong>不需要查询或者减少查询数据库，因为 JWT 自包含了用户信息和加密的数据。</strong></li></ul><h2 id="常见的前后端鉴权方式"><strong>常见的前后端鉴权方式</strong></h2><ol><li>Session-Cookie</li><li>Token 验证（包括 JWT，SSO）</li><li>OAuth2.0（开放授权）</li></ol><h2 id="常见的加密算法"><strong>常见的加密算法</strong></h2><h3 id="不可逆加密：【Hash-加密算法-散列算法-摘要算法】">不可逆加密：【Hash 加密算法/散列算法/摘要算法】</h3><ul><li>一旦加密就不能反向解密得到密码原文，一般用来加密用户密码,app 的服务器端数据库里一般存储的也都是加密后的用户密码。</li><li>在数据传输的过程中，首先把密码类数据经过 MD5 加密算法加密，然后再在外面使用可逆的加密方式加密一次，这样在数据传输的过程中，即便数据被截获了，但是想要完全破解，还是很难的。</li><li>Hash 算法特别的地方在于它是一种单向算法，用户可以通过 Hash 算法对目标信息生成一段特定长度的唯一的 Hash 值，却不能通过这个 Hash 值重新获得目标信息。因此 Hash 算法常用在不可还原的密码存储、信息完整性校验等。</li><li>用途：一般用于效验下载文件正确性，一般在网站上下载文件都能见到；存储用户敏感信息，如密码、 卡号等不可解密的信息。</li><li>常见的不可逆加密算法有：MD5、SHA、HMAC</li></ul><blockquote><p>MD5：Message Digest Algorithm MD5（中文名为消息摘要算法第五版）为计算机安全领域广泛使用的一种散列函数，用以提供消息的完整性保护。该算法的文件号为 RFC 1321（R.Rivest,MIT Laboratory for Computer Science and RSA Data Security Inc. April 1992）。 MD5 即 Message-Digest Algorithm 5（信息-摘要算法 5），用于确保信息传输完整一致。是计算机广泛使用的杂凑算法之一（又译摘要算法、哈希算法），主流编程语言普遍已有 MD5 实现。将数据（如汉字）运算为另一固定长度值，是杂凑算法的基础原理，MD5 的前身有 MD2、MD3 和 MD4。</p><p>MD5 算法具有以下特点： 1、压缩性：任意长度的数据，算出的 MD5 值长度都是固定的。 2、容易计算：从原数据计算出 MD5 值很容易。 3、抗修改性：对原数据进行任何改动，哪怕只修改 1 个字节，所得到的 MD5 值都有很大区别。 4、强抗碰撞：已知原数据和其 MD5 值，想找到一个具有相同 MD5 值的数据（即伪造数据）是非常困难的。 MD5 的作用是让大容量信息在用数字签名软件签署私人密钥前被&quot;压缩&quot;成一种保密的格式（就是把一个任意长度的字节串变换成一定长的十六进制数字串）。除了 MD5 以外，其中比较有名的还有 sha-1、RIPEMD 以及 Haval 等。</p></blockquote><blockquote><p>SHA1 ：安全哈希算法（Secure Hash Algorithm）主要适用于数字签名标准 （Digital Signature Standard DSS）里面定义的数字签名算法（Digital Signature Algorithm DSA）。对于长度小于 2^64 位的消息，SHA1 会产生一个 160 位的消息摘要。当接收到消息的时候，这个消息摘要可以用来验证数据的完整性。在传输的过程中，数据很可能会发生变化，那么这时候就会产生不同的消息摘要。 SHA1 有如下特点： 1.不可以从消息摘要中复原信息； 2.两个不同的消息不会产生同样的消息摘要,(但会有 1x10 ^ 48 分之一的机率出现相同的消息摘要,一般使用时忽略)。</p></blockquote><h3 id="可逆加密：可逆加密有对称加密和非对称加密。">可逆加密：可逆加密有对称加密和非对称加密。</h3><h4 id="对称加密：【文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥】">对称加密：【文件加密和解密使用相同的密钥，即加密密钥也可以用作解密密钥】</h4><ul><li>在对称加密算法中，数据发信方将明文和加密密钥一起经过特殊的加密算法处理后，使其变成复杂的加密密文发送出去，收信方收到密文后，若想解读出原文，则需要使用加密时用的密钥以及相同加密算法的逆算法对密文进行解密，才能使其回复成可读明文。在对称加密算法中，使用的密钥只有一个，收发双方都使用这个密钥，这就需要解密方事先知道加密密钥。</li><li>对称加密算法的优点是算法公开、计算量小、加密速度快、加密效率高。</li><li>用途：<strong>一般用于保存用户手机号、身份证等敏感但能解密的信息。</strong></li><li>常见的对称加密算法有 AES（高级加密标准）、<strong>DES（数据加密算法）</strong>、3DES、Blowfish、IDEA、RC4、RC5、RC6</li></ul><h4 id="非对称加密：【两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密】">非对称加密：【两个密钥：公开密钥（publickey）和私有密钥，公有密钥加密，私有密钥解密】</h4><ul><li>非对称加密算法是一种密钥的保密方法。非对称加密算法需要两个密钥：公开密钥（publickey）和私有密钥（privatekey）。公开密钥与私有密钥是一对，如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密；如果用私有密钥对数据进行加密，那么只有用对应的公开密钥才能解密。因为加密和解密使用的是两个不同的密钥，所以这种算法叫作非对称加密算法。</li><li>非对称加密算法实现机密信息交换的基本过程是：甲方生成一对密钥并将其中的一把作为公用密钥向其它方公开；得到该公用密钥的乙方使用该密钥对机密信息进行加密后再发送给甲方；甲方再用自己保存的另一把专用密钥对加密后的信息进行解密。</li><li>服务器存私钥，客户端拿公钥，客户端加解密算法可以做成 so 库。</li><li>非对称加密与对称加密相比，其安全性更好；非对称加密的缺点是加密和解密花费时间长、速度慢，只适合对少量数据进行加密。</li><li>用途：<strong>一般用于签名和认证。</strong></li><li>常见的非对称加密算法有：RSA（公钥加密算法）、DSA（数字签名用）、ECC（移动设备用）、Diffie-Hellman、El Gamal</li></ul><h2 id="常见问题"><strong>常见问题</strong></h2><h3 id="使用-cookie-时需要考虑的问题"><strong>使用 cookie 时需要考虑的问题</strong></h3><ul><li>因为存储在客户端，容易被客户端篡改，<strong>使用前需要验证合法性</strong>，所以，<strong>不要存储敏感数据</strong>，比如用户密码，账户余额；使用 <strong>httpOnly</strong> 在一定程度上提高安全性</li><li><strong>尽量减少 cookie 的体积</strong>，能存储的数据量不能超过 4kb；一个浏览器针对一个网站最多存 20 个 Cookie，浏览器一般只允许存放 300 个 Cookie</li><li>设置正确的 domain 和 path，减少数据传输</li><li><strong>cookie 无法跨域</strong>（每个 cookie 都会绑定单一的域名，无法在别的域名下获取使用）</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-session-时需要考虑的问题"><strong>使用 session 时需要考虑的问题</strong></h3><ul><li>将 session 存储在服务器里面，<strong>当用户同时在线量比较多时</strong>，这些 session 会占据较多的内存，需要<strong>在服务端定期的去清理过期的 session</strong></li><li>当网站采用<strong>集群部署</strong>的时候，会遇到<strong>多台 web 服务器之间如何做 session 共享的问题</strong>。因为 session 是由单个服务器创建的，但是处理用户请求的服务器不一定是那个创建 session 的服务器，那么该服务器就无法拿到之前已经放入到 session 中的登录凭证之类的信息了。<strong>解决方案</strong>：写客户端 cookie 的方式、服务器之间 session 数据同步、用 mysql 数据库共享 session 数据。</li><li>当多个应用要共享 session 时，除了以上问题，还会遇到跨域问题，因为不同的应用可能部署的主机不一样，需要在<strong>各个应用做好 cookie 跨域的处理</strong>。</li><li><strong>sessionId 是存储在 cookie 中的，假如浏览器禁止 cookie 或不支持 cookie 怎么办？</strong> 一般会把 sessionId 跟在 url 参数后面即重写 url，所以 session 不一定非得需要靠 cookie 实现</li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-token-时需要考虑的问题"><strong>使用 token 时需要考虑的问题</strong></h3><ul><li>如果你认为用数据库来存储 token 会导致查询时间太长，可以选择放在内存当中。比如 redis 很适合你对 token 查询的需求。</li><li><strong>token 完全由应用管理，所以它可以避开同源策略</strong></li><li><strong>token 可以避免 CSRF 攻击(因为不需要 cookie 了)</strong></li><li><strong>移动端对 cookie 的支持不是很好，而 session 需要基于 cookie 实现，所以移动端常用的是 token</strong></li></ul><h3 id="使用-JWT-时需要考虑的问题"><strong>使用 JWT 时需要考虑的问题</strong></h3><ul><li>因为 <strong>JWT 并不依赖 Cookie</strong> 的，所以你可以使用任何域名提供你的 API 服务而不需要担心跨域资源共享问题（CORS）</li><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>JWT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li><strong>JWT 最大的优势是服务器不再需要存储 Session，使得服务器认证鉴权业务可以方便扩展</strong>。但这也是 JWT 最大的缺点：由于服务器不需要存储 Session 状态，因此**使用过程中无法废弃某个 Token 或者更改 Token 的权限。**也就是说一旦 JWT 签发了，到期之前就会始终有效，除非服务器部署额外的逻辑。</li><li><strong>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限</strong>。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li><strong>JWT 适合一次性的命令认证，颁发一个有效期极短的 JWT</strong>，即使暴露了危险也很小，由于每次操作都会生成新的 JWT，因此也没必要保存 JWT，真正实现无状态。</li><li><strong>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</strong></li></ul><h3 id="使用加密算法时需要考虑的问题"><strong>使用加密算法时需要考虑的问题</strong></h3><ul><li>绝不要以<strong>明文存储</strong>密码</li><li><strong>永远使用 哈希算法 来处理密码，绝不要使用 Base64 或其他编码方式来存储密码，这和以明文存储密码是一样的，使用哈希，而不要使用编码</strong>。编码以及加密，都是双向的过程，而密码是保密的，应该只被它的所有者知道， 这个过程必须是单向的。哈希正是用于做这个的，从来没有解哈希这种说法， 但是编码就存在解码，加密就存在解密。</li><li>绝不要使用弱哈希或已被破解的哈希算法，像 MD5 或 SHA1 ，只使用强密码哈希算法。</li><li>绝不要以明文形式显示或发送密码，即使是对密码的所有者也应该这样。如果你需要 “忘记密码” 的功能，可以随机生成一个新的 <strong>一次性的</strong>（这点很重要）密码，然后把这个密码发送给用户。</li></ul><h3 id="分布式架构下-session-共享方案"><strong>分布式架构下 session 共享方案</strong></h3><h4 id="1-session-复制"><strong>1. session 复制</strong></h4><ul><li>任何一个服务器上的 session 发生改变（增删改），该节点会把这个 session 的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要 session ，以此来保证 session 同步</li></ul><p><strong>优点：</strong> 可容错，各个服务器间 session 能够实时响应。</p><p><strong>缺点：</strong> 会对网络负荷造成一定压力，如果 session 量大的话可能会造成网络堵塞，拖慢服务器性能。</p><h4 id="2-粘性-session-IP-绑定策略"><strong>2. 粘性 session /IP 绑定策略</strong></h4><ul><li><strong>采用 Ngnix 中的 ip_hash 机制，将某个 ip 的所有请求都定向到同一台服务器上，即将用户与服务器绑定。</strong> 用户第一次请求时，负载均衡器将用户的请求转发到了 A 服务器上，如果负载均衡器设置了粘性 session 的话，那么用户以后的每次请求都会转发到 A 服务器上，相当于把用户和 A 服务器粘到了一块，这就是粘性 session 机制。</li></ul><p><strong>优点：</strong> 简单，不需要对 session 做任何处理。</p><p><strong>缺点：</strong> 缺乏容错性，如果当前访问的服务器发生故障，用户被转移到第二个服务器上时，他的 session 信息都将失效。</p><p><strong>适用场景：</strong> 发生故障对客户产生的影响较小；服务器发生故障是低概率事件 。</p><p><strong>实现方式：</strong> 以 Nginx 为例，在 upstream 模块配置 ip_hash 属性即可实现粘性 session。</p><h4 id="3-session-共享（常用）"><strong>3. session 共享（常用）</strong></h4><ul><li><p>使用分布式缓存方案比如 Memcached 、Redis 来缓存 session，<strong>但是要求 Memcached 或 Redis 必须是集群</strong></p></li><li><p>把 session 放到 Redis 中存储，虽然架构上变得复杂，并且需要多访问一次 Redis ，但是这种方案带来的好处也是很大的：</p><ul><li>实现了 session 共享；</li><li>可以水平扩展（增加 Redis 服务器）；</li><li>服务器重启 session 不丢失（不过也要注意 session 在 Redis 中的刷新/失效机制）；</li><li>不仅可以跨服务器 session 共享，甚至可以跨平台（例如网页端和 APP 端）</li></ul></li></ul><h4 id="4-session-持久化"><strong>4. session 持久化</strong></h4><ul><li>将 session 存储到数据库中，保证 session 的持久化</li></ul><p><strong>优点：</strong> 服务器出现问题，session 不会丢失</p><p><strong>缺点：</strong> 如果网站的访问量很大，把 session 存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。</p><h3 id="只要关闭浏览器-，session-真的就消失了？"><strong>只要关闭浏览器 ，session 真的就消失了？</strong></h3><p>不对。<strong>对 session 来说，除非程序通知服务器删除一个 session，否则服务器会一直保留</strong>，程序一般都是在用户做 log off 的时候发个指令去删除 session。</p><p>然而浏览器从来不会主动在关闭之前通知服务器它将要关闭，因此服务器根本不会有机会知道浏览器已经关闭，之所以会有这种错觉，是<strong>大部分 session 机制都使用会话 cookie 来保存 session id，而关闭浏览器后这个 session id 就消失了，再次连接服务器时也就无法找到原来的 session</strong>。</p><p>如果服务器设置的 cookie 被保存在硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 session id 发送给服务器，则再次打开浏览器仍然能够打开原来的 session。</p><p>恰恰是<strong>由于关闭浏览器不会导致 session 被删除，迫使服务器为 session 设置了一个失效时间，当距离客户端上一次使用 session 的时间超过这个失效时间时，服务器就认为客户端已经停止了活动，才会把 session 删除以节省存储空间。</strong></p><h2 id="项目地址"><strong>项目地址</strong></h2><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fgithub.com%2Fyjdjiayou%2Fjwt-demo">https://github.com/yjdjiayou/jwt-demo</a></p><h2 id="巨人的肩膀：">巨人的肩膀：</h2><p><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fjuejin.im%2Fpost%2F6844904034181070861">https://juejin.im/post/6844904034181070861</a><br><a href="https://www.jianshu.com/p/b2e23939ad46">https://www.jianshu.com/p/b2e23939ad46</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.51cto.com%2Fjamesfancy%2F2065665">https://blog.51cto.com/jamesfancy/2065665</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fkaixuansui%2Farticle%2Fdetails%2F94433920">https://blog.csdn.net/kaixuansui/article/details/94433920</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fyuki-nana%2Fp%2F14001600.html">https://www.cnblogs.com/yuki-nana/p/14001600.html</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fwww.cnblogs.com%2Fxiaozhang2014%2Fp%2F7750200.html">https://www.cnblogs.com/xiaozhang2014/p/7750200.html</a><br><a href="https://links.jianshu.com/go?to=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fj-6ngGKRJvB3gfY4VJaU4A">https://mp.weixin.qq.com/s/j-6ngGKRJvB3gfY4VJaU4A</a></p>]]></content>
    
    
    <summary type="html">Cookie、Session、Token 与 JWT 解析</summary>
    
    
    
    <category term="Web认证" scheme="https://jahaw.github.io/categories/Web%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="Cookie、Session、Token 与 JWT 解析" scheme="https://jahaw.github.io/tags/Cookie%E3%80%81Session%E3%80%81Token-%E4%B8%8E-JWT-%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="https://jahaw.github.io/posts/8d4cbf50.html"/>
    <id>https://jahaw.github.io/posts/8d4cbf50.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Cookie">Cookie</h3><p><strong>Cookie是什么？</strong></p><ul><li>网站为了辨别用户身份，进行Session跟踪而储存在用户本地终端上的数据（通常经过加密），由客户端暂时或永久保存的信息。</li></ul><p><strong>Cookie工作原理</strong></p><ul><li>服务器颁发给客户端的唯一通行证，用来识别客户端身份</li></ul><p><strong>Cookie特点</strong></p><ul><li>Cookie存储的数据量有限，浏览器中的Cookie存储的数据一般不超过4KB(超出的话，最早创建的会被删除)</li><li>浏览器可以禁用Cookie</li></ul><p><strong>Cookie 种类</strong></p><ul><li>会话Cookie: 存储在浏览器内存中，浏览器在关闭之后该 Cookie 失效(默认: Max-Age: -1)</li><li>持久Cookie: 存储在客户端的本地磁盘上,用于长久保持用户登录状态(Max-Age &gt; 0)</li><li>Cookie对象有一个Max-Age属性，Max-Age属性的值就是Cookie的生存周期，在这个周期内Cookie有效，超出周期Cookie就会被清除</li></ul><p><strong>应用场景</strong></p><ul><li>对安全要求不高</li><li>不需要存储大量数据</li><li>主要应用场景<ul><li>会话状态管理<ul><li>用户登录状态<ul><li>服务器在Cookie中存储用户信息、并设置过期时间</li></ul></li><li>购物车</li><li>游戏分数或其它需要记录的信息</li></ul></li><li>个性化设置（如用户自定义设置、主题等）</li><li>浏览器行为跟踪（如跟踪分析用户行为等）<br><img src="images/session/set-cookie.png" alt="set-cookie.png"></li></ul></li></ul><p><strong>Cookie什么时候被创建及怎么手动创建</strong></p><ul><li>默认创建<ol><li>当用户访问的是JSP这类技术编写的页面时，服务器自动为该浏览器创建一个会话Cookie</li><li>当用户请求一个servlet并且该servlet中调用了request.getSession()方法时，服务器自动为该浏览器创建一个会话Cookie(格式:JSESSIONID: sessionId)</li></ol></li></ul><h3 id="Session详解实现持久化用户登录状态">Session详解实现持久化用户登录状态</h3><p><strong>什么是会话</strong></p><ul><li>从服务器创建Session到Session 过期的过程</li></ul><p><strong>什么是Session？</strong></p><ul><li>服务器发送给客户端一个令牌，该令牌上有唯一标识的ID，每次请求服务器时，浏览器出示该令牌，服务器通过令牌上的ID来找到对应的用户</li><li>Sessino保持在服务器端，因此可以存储大量数据</li></ul><p><strong>Session什么时候被创建？</strong></p><ul><li>当用户访问的是JSP这类技术编写的页面时，服务器自动为该浏览器创建唯一一个session</li><li>如果请求的是servlet,且该servlet中调用了request.getSession()方法时，服务器自动为该浏览器创建唯一一个session</li><li>如果服务器没有为发送请求的浏览器创建Session时，request.getSession()会自动创建一个Seession并返回;如果有的话，该方法会找到这个Session并返回</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取客户端的session,如果不存在，自动创建一个</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"> <span class="comment">//设置session的最大存活时间为1000s</span></span><br><span class="line">session.setMaxInactiveInterval(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//销毁session</span></span><br><span class="line"><span class="comment">//session.invalidate();</span></span><br></pre></td></tr></table></figure><p><strong>设置Cookie?</strong></p><ul><li>通过set-cookie 在该次响应头中设置session ID ，并返回该响应头给客户端</li></ul><p><strong>Session与Cookie结合使用</strong></p><ul><li>当浏览器向服务器端发送了一个携有Cookie请求时，浏览器会把此 Cookies 放到请求头一起提交给服务器，服务器通过此Cookies 的value属性值来找到对应的Session， 然后再通过该 Session 来获得存在该对象中的信息</li></ul><p><strong>Cookie 和 Session 有什么不同？</strong></p><ol><li>作用范围不同，Cookie 保存在客户端（浏览器），Session 保存在服务器端。</li><li>存取方式的不同，Cookie 只能保存 ASCII，Session 可以存任意数据类型，一般情况下我们可以在 Session 中保持一些常用变量信息，比如说 UserId 等。</li><li>有效期不同，Cookie 可设置为长时间保持，比如我们经常使用的默认登录功能，Session 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li></ol>]]></content>
    
    
    <summary type="html">Cookie</summary>
    
    
    
    <category term="Web认证" scheme="https://jahaw.github.io/categories/Web%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="Cookie" scheme="https://jahaw.github.io/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Token</title>
    <link href="https://jahaw.github.io/posts/9ef68e3f.html"/>
    <id>https://jahaw.github.io/posts/9ef68e3f.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<p>Token的定义：</p><ol><li>Token是服务端生成的一个字符串</li><li>用作客户端请求数据验证，避免数据库的频道查询，生成后存储在session中</li></ol><p>使用Token的目的：<br>验证用户登陆情况、减轻服务器查询压力(从redis 中 查询session 压力)</p><p>JWT:<br>一个Token字符串,由三部分组成，头部、载荷与签名<br>红色的为头部Header<br>紫色的为载荷playload<br>蓝色的为签名Signature</p><p>Header: 签名的算法类型HS256+JWT<br>Payload: 包含过期时间、签发时间、用户ID等信息<br>Signature：对上边两字符串进行二次加密（防止token被篡改）</p>]]></content>
    
    
    <summary type="html">Token</summary>
    
    
    
    <category term="Web认证" scheme="https://jahaw.github.io/categories/Web%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="Token" scheme="https://jahaw.github.io/tags/Token/"/>
    
  </entry>
  
  <entry>
    <title>w3cschoolSql</title>
    <link href="https://jahaw.github.io/posts/a68635.html"/>
    <id>https://jahaw.github.io/posts/a68635.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.328Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  @<span class="variable">@FOREIGN_KEY_CHECKS</span>;</span><br><span class="line">use w3cschool;</span><br><span class="line"><span class="keyword">SET</span> NAMES utf8;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `w3cschool_tbl`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> w3cschool_tbl(</span><br><span class="line">   w3cschool_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">   w3cschool_title <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   w3cschool_author <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   submission_date <span class="type">DATE</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( w3cschool_id )</span><br><span class="line">  ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> w3cschool_tbl </span><br><span class="line">     (w3cschool_title, w3cschool_author, submission_date)</span><br><span class="line">     <span class="keyword">VALUES</span></span><br><span class="line">     (&quot;Learn PHP&quot;, &quot;John Poul&quot;, NOW()),</span><br><span class="line"> (&quot;Learn MySQL&quot;, &quot;Abdul S&quot;, NOW()),</span><br><span class="line"> (&quot;JAVA Tutorial&quot;, &quot;Sanjay&quot;, <span class="string">&#x27;2007-05-06&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Table structure for `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `employee_tbl`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `employee_tbl` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `name` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  `<span class="type">date</span>` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `singin` tinyint(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;登录次数&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">--  Records of `employee_tbl`</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `employee_tbl` <span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-22 15:25:33&#x27;</span>, <span class="string">&#x27;1&#x27;</span>), (<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;2016-04-20 15:25:47&#x27;</span>, <span class="string">&#x27;3&#x27;</span>), (<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;小丽&#x27;</span>, <span class="string">&#x27;2016-04-19 15:26:02&#x27;</span>, <span class="string">&#x27;2&#x27;</span>), (<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;小王&#x27;</span>, <span class="string">&#x27;2016-04-07 15:26:14&#x27;</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-11 15:26:40&#x27;</span>, <span class="string">&#x27;4&#x27;</span>), (<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;小明&#x27;</span>, <span class="string">&#x27;2016-04-04 15:26:54&#x27;</span>, <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tcount_tbl` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `w3cschool_author` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">`w3cschool_count` <span class="type">int</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tcount_tbl` (w3cschool_author, w3cschool_count) </span><br><span class="line">  <span class="keyword">VALUES</span> (<span class="string">&#x27;mahran&#x27;</span>, <span class="number">20</span>),(<span class="string">&#x27;mahnaz&#x27;</span>, <span class="number">10</span>),(<span class="string">&#x27;Jen&#x27;</span>, <span class="number">60</span>),(<span class="string">&#x27;Gill&#x27;</span>, <span class="number">45</span>),(<span class="string">&#x27;John Poul&#x27;</span>, <span class="number">5</span>),(<span class="string">&#x27;Sanjay&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> tables;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name ,<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">from</span> employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name;</span><br><span class="line"><span class="keyword">SELECT</span> name, <span class="built_in">SUM</span>(singin) <span class="keyword">as</span> singin_count <span class="keyword">from</span> employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">coalesce</span>(name, <span class="string">&#x27;总数&#x27;</span>), <span class="built_in">SUM</span>(singin) <span class="keyword">as</span> singin_count <span class="keyword">from</span> employee_tbl <span class="keyword">GROUP</span> <span class="keyword">BY</span> name <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> a.w3cschool_id, a.w3cschool_author, b.w3cschool_count <span class="keyword">FROM</span> w3cschool_tbl a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> tcount_tbl b <span class="keyword">ON</span> a.w3cschool_author <span class="operator">=</span> b.w3cschool_author;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">w3cschool.sql</summary>
    
    
    
    <category term="SQL" scheme="https://jahaw.github.io/categories/SQL/"/>
    
    
    <category term="SQL" scheme="https://jahaw.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>第三方Cookie</title>
    <link href="https://jahaw.github.io/posts/304cbca6.html"/>
    <id>https://jahaw.github.io/posts/304cbca6.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第三方Cookie">第三方Cookie</h3><p><strong>Cookie 作用</strong></p><ol><li>记录网页上用户状态、浏览活动</li><li>便于进行用户画像设定</li><li>网站一定期限内免登录</li></ol><p><strong>场景</strong></p><ul><li>用户访问 <a href="http://www.baidu.com">www.baidu.com</a>, 返回页面中内嵌 第三方广告信息，比如瓜子二手车(目标站点访问了第三方域名提供的功能)</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一方cookie： 由百度服务器创建</span><br><span class="line">第三方cookie： 由瓜子二手车服务器创建</span><br><span class="line"></span><br><span class="line">第三方cookie记录了当前用户的浏览记录及喜好，当你访问第三方域名时，对用户进行个性化广告推荐</span><br></pre></td></tr></table></figure><p>禁用后第一方cookie存储的用户数据 价值更大<br>寻找新的广告推荐替代cookie</p><p>依赖第三方cookie小公司面临倒闭，各大搜索引擎厂商形成垄断</p><p>新的广告推荐方案：</p><ol><li>将相同喜好的用户归组，进行集体推荐</li></ol><p>移动端：<br>手机APP索要的各种权限、隐私条款都被用来进行用户画像设定</p><p>如果禁了第三方cookie，那么广告推送技术就只剩下了一种：第一方推送用户数据给广告商，广告商再分析数据推送广告。<br>好处：<br>责任明确，用户需要允许推送的隐私内容<br>第一方只能推送用户允许推送的隐私内容<br>第三方无法擅自获得用户隐私</p>]]></content>
    
    
    <summary type="html">第三方Cookie</summary>
    
    
    
    <category term="Web认证" scheme="https://jahaw.github.io/categories/Web%E8%AE%A4%E8%AF%81/"/>
    
    
    <category term="第三方Cookie" scheme="https://jahaw.github.io/tags/%E7%AC%AC%E4%B8%89%E6%96%B9Cookie/"/>
    
  </entry>
  
  <entry>
    <title>临时记录</title>
    <link href="https://jahaw.github.io/posts/b916a8dc.html"/>
    <id>https://jahaw.github.io/posts/b916a8dc.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hadoop-集群运行jar-包">Hadoop 集群运行jar 包</h3><p><a href="https://blog.csdn.net/weixin_49429575/article/details/109599272">https://blog.csdn.net/weixin_49429575/article/details/109599272</a></p><h3 id="大数据平台是否更应该容器化">大数据平台是否更应该容器化</h3><p><a href="https://blog.csdn.net/rlnlo2pnefx9c/article/details/107171331">https://blog.csdn.net/rlnlo2pnefx9c/article/details/107171331</a></p><p>电诈访问地址：<br><a href="https://www.gaoxin-fraud.9sdata.cn/management.html">https://www.gaoxin-fraud.9sdata.cn/management.html</a></p><p>渭南项目访问地址：<br><a href="https://www.service-bj.9sdata.cn/">https://www.service-bj.9sdata.cn/</a></p><p>3d earth:<br><a href="https://2050.earth/?ref=sheui.com">https://2050.earth/?ref=sheui.com</a><br><a href="https://zhuanlan.zhihu.com/p/35120118">https://zhuanlan.zhihu.com/p/35120118</a><br><a href="https://wow.techbrood.com/fiddle/38828">https://wow.techbrood.com/fiddle/38828</a></p><p>一些低代码产品和平台<br><a href="http://boot.jeecg.com/user/login">http://boot.jeecg.com/user/login</a><br><a href="http://demo.ruoyi.vip/index">http://demo.ruoyi.vip/index</a><br><a href="https://www.mingdao.com/app/my">https://www.mingdao.com/app/my</a><br><a href="https://www.jiandaoyun.com/dashboard#/">https://www.jiandaoyun.com/dashboard#/</a></p><h2 id="UI设计网站">UI设计网站</h2><ol><li><a href="https://js.design/">https://js.design/</a></li><li><a href="https://codesign.qq.com/app/design">https://codesign.qq.com/app/design</a></li><li>figma</li><li>蓝湖</li></ol><p>export JAVA_HOME=/usr/java/jdk1.7.0_67<br>export JAVA_BIN=/usr/java/jdk1.7.0_67/bin<br>export PATH=$PATH:$JAVA_HOME/bin<br>export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar<br>export JAVA_HOMEJAVA_BINPATHCLASSPATH</p><p>#set hadoop path<br>export HADOOP_HOME=/home/hadoop/software/hadoop<br>export PATH=$PATH:$HADOOP_HOME/bin</p><p>#set scala path<br>export SCALA_HOME=/home/hadoop/software/scala-2.11.4<br>export PATH=$PATH:$SCALA_HOME/bin</p><p>#set spark path<br>export SPARK_HOME=/home/hadoop/software/spark-1.6.1-bin-hadoop2.6<br>export PATH=$PATH:$SPARK_HOME/bin</p><p>export  YARN_CONF_DIR=/home/hadoop/platform-config<br>export HADOOP_CONF_DIR=/home/hadoop/platform-config</p><h2 id="dom-流畅滚动">dom 流畅滚动</h2><p>element.scrollIntoView({block:‘start’,behavior:‘smooth’})<br>element.scrollTo(0, 0)</p><h2 id="修正-单页应用在-ie-下不兼容问题">修正 单页应用在 ie 下不兼容问题</h2><p>config.entry.app = [‘babel-polyfill’, ‘eventsource-polyfill’, ‘./src/main.js’];</p><p>@yanhaijing/console_js// console 在 低版本 ie 下 为 undefined<br>autoprefixer      // postcss 自动填充 前缀<br>es6-promise<br>ie-placeholder  // 处理 IE 下 input placeholder 问题<br>element-dataset// 修正 HTMLElement.dataset 属性</p><ul><li><p>可视化</p><ul><li>3d 地球</li><li>BI 可视化</li><li>知识图谱</li><li>在线 excel 编辑器</li></ul><p>quest 1: 如何实现 class 只能被 new 不能被 直接调用</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">a</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">filed1</span> = a;</span><br><span class="line">  &#125;</span><br><span class="line">  filed2 = <span class="number">2</span>;</span><br><span class="line">  func1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">babel 编译后</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_classCallCheck</span>(<span class="params">instance, Constructor</span>) &#123;</span><br><span class="line">　<span class="comment">// instanceof 检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span></span><br><span class="line">  <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> <span class="title class_">Constructor</span>)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;Cannot call a class as a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _Parent = <span class="keyword">function</span> <span class="title function_">Parent</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, _Parent);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filed2</span> = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">func1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">filed1</span> = a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 new 操作符 创建实例</span></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>, instance);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line"><span class="title class_">Parent</span>();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">临时记录</summary>
    
    
    
    <category term="临时记录" scheme="https://jahaw.github.io/categories/%E4%B8%B4%E6%97%B6%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="临时记录" scheme="https://jahaw.github.io/tags/%E4%B8%B4%E6%97%B6%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>ISO、GMT、UTC区别</title>
    <link href="https://jahaw.github.io/posts/7e38c7f4.html"/>
    <id>https://jahaw.github.io/posts/7e38c7f4.html</id>
    <published>2023-06-21T07:31:42.000Z</published>
    <updated>2023-07-18T13:37:03.329Z</updated>
    
    <content type="html"><![CDATA[<p><strong>ISO、GMT、UTC区别</strong></p><ul><li>ISO 国际标准化组织的日期和时间的表示方法</li></ul><blockquote><p>字母T：日期和时间的分隔符<br>字母Z：表示UTC时间（可简单理解为是0时区）；也可用4位数字格式的时间偏移量代替；不写的时候表示不偏移(当前时区)</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例子：</span></span><br><span class="line"><span class="attribute">2019</span>-<span class="number">09</span>-<span class="number">26</span>T03:<span class="number">45</span>:<span class="number">36</span>.<span class="number">656</span>Z      // <span class="number">0</span>时区的<span class="number">2019</span>年<span class="number">9</span>月<span class="number">26</span>日<span class="number">3</span>点<span class="number">45</span>分<span class="number">36</span>秒<span class="number">656</span>毫秒</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">09</span>-<span class="number">26</span>T03:<span class="number">45</span>:<span class="number">36</span>.<span class="number">656</span>-<span class="number">0800</span>  // 西八区的<span class="number">2019</span>年<span class="number">9</span>月<span class="number">26</span>日<span class="number">3</span>点<span class="number">45</span>分<span class="number">36</span>秒<span class="number">656</span>毫秒</span><br><span class="line"><span class="attribute">2019</span>-<span class="number">09</span>-<span class="number">26</span>T03:<span class="number">45</span>:<span class="number">36</span>.<span class="number">656</span>+<span class="number">0800</span>  // 东八区的<span class="number">2019</span>年<span class="number">9</span>月<span class="number">26</span>日<span class="number">3</span>点<span class="number">45</span>分<span class="number">36</span>秒<span class="number">656</span>毫秒</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#以下是ISO格式的各种情况转换为 GMT+0800（东8区时间）：</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">new</span> Date(&#x27;<span class="number">2019</span>-<span class="number">09</span>-<span class="number">25</span>T18:<span class="number">00</span>:<span class="number">14</span>&#x27;);      // 不写z</span><br><span class="line"></span><br><span class="line"><span class="attribute">Wed</span> Sep <span class="number">25</span> <span class="number">2019</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">14</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line"></span><br><span class="line"><span class="attribute">new</span> Date(&#x27;<span class="number">2019</span>-<span class="number">09</span>-<span class="number">25</span>T18:<span class="number">00</span>:<span class="number">14</span>z&#x27;);    // 结尾是z</span><br><span class="line"></span><br><span class="line"><span class="attribute">Thu</span> Sep <span class="number">26</span> <span class="number">2019</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">14</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line"></span><br><span class="line"><span class="attribute">new</span> Date(&#x27;<span class="number">2019</span>-<span class="number">09</span>-<span class="number">25</span>T18:<span class="number">00</span>:<span class="number">14</span>+<span class="number">0000</span>&#x27;);  // <span class="number">0</span>时区</span><br><span class="line"></span><br><span class="line"><span class="attribute">Thu</span> Sep <span class="number">26</span> <span class="number">2019</span> <span class="number">02</span>:<span class="number">00</span>:<span class="number">14</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line"></span><br><span class="line"><span class="attribute">new</span> Date(&#x27;<span class="number">2019</span>-<span class="number">09</span>-<span class="number">25</span>T18:<span class="number">00</span>:<span class="number">14</span>+<span class="number">0800</span>&#x27;);  // 东<span class="number">8</span>区</span><br><span class="line"></span><br><span class="line"><span class="attribute">Wed</span> Sep <span class="number">25</span> <span class="number">2019</span> <span class="number">18</span>:<span class="number">00</span>:<span class="number">14</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line"></span><br><span class="line"><span class="attribute">new</span> Date(&#x27;<span class="number">2019</span>-<span class="number">09</span>-<span class="number">25</span>T18:<span class="number">00</span>:<span class="number">14</span>-<span class="number">0800</span>&#x27;);  // 西<span class="number">8</span>区</span><br><span class="line"></span><br><span class="line"><span class="attribute">Thu</span> Sep <span class="number">26</span> <span class="number">2019</span> <span class="number">10</span>:<span class="number">00</span>:<span class="number">14</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure><ul><li><p>GMT 格林威治时间（0时区时间）</p></li><li><p>UTC 世界标准时（根据GMT时间计算得来，比GMT更加精确，误差在0.9秒以内）</p></li></ul>]]></content>
    
    
    <summary type="html">ISO、GMT、UTC区别</summary>
    
    
    
    <category term="临时记录" scheme="https://jahaw.github.io/categories/%E4%B8%B4%E6%97%B6%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="临时记录" scheme="https://jahaw.github.io/tags/%E4%B8%B4%E6%97%B6%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
</feed>
